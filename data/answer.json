{
  "docs": [
    {
      "_id": "app_settings",
      "name": "Watson Agile Advisor"
    },
    {
      "_id": "general-bluemix-info",
      "message": "只今の Bluemix Public の状況ですね？ <a target=\"_blank\" href=\"https://console.bluemix.net/status?tags=platform,runtimes,services&view=s:a/\">こちら</a> をクリックしてください。",
      "questions": [
        "Bluemixの状況を教えて",
        "Bluemix Publicの状況を教えて",
        "ブルーミックスの状況を教えて"
      ]
    },
    {
      "_id": "general-bochibochi",
      "message": "ぼちぼちでんな",
      "questions": [
        "もうかりまっか"
      ]
    },
    {
      "_id": "general_whoareyou",
      "message": "私はワトソンです。IBMから来ました。よろしくお願いします。",
      "questions": [
        "あなたは誰ですか?",
        "名前を教えてください。",
        "名前は?",
        "だれですか？",
        "自己紹介して。",
        "誰?"
      ]
    },
    {
      "_id": "general_hello",
      "message": "こんにちは。私はワトソンです。",
      "questions": [
        "こんばんは。",
        "はじめまして。",
        "はじめまして。こんにちは。 ",
        "こんにちは。",
        "よろしくお願いします。",
        "おはようございます。"
      ]
    },
    {
      "_id": "general_thanks",
      "message": "どういたしまして。またいつでも聞いてくださいね。",
      "questions": [
        "ありがとうございました。頑張ります。",
        "ありがとう。",
        "どうも、ありがとう。",
        "教えてくれてありがとう。",
        "がんばります。",
        "感謝します",
        "ありがとうございます。"
      ]
    },
    {
      "_id": "general_howareyou",
      "message": "Watsonは勉強中です！勉強は楽しいですよ。",
      "questions": [
        "何のために生きてるの?",
        "調子はどう?",
        "お元気ですか?",
        "ご機嫌いかがですか?",
        "なにやっているの?"
      ]
    },
    {
      "_id": "general_bye",
      "message": "また、明日も会いましょう。それではさようなら。",
      "questions": [
        "さようなら。",
        "さよなら。",
        "またお願いします",
        "また明日。",
        "またね。",
        "特に用はないです。",
        "バイバイ。"
      ]
    },
    {
      "_id": "general_sorry",
      "message": "すみませんがアジャイル侍か坂場先生にお問い合わせください。次はちゃんと答えられるように勉強しておきますね。",
      "questions": [
        "解決しない",
        "答えが違います。",
        "間違っています。",
        "言っていることが分かりません。",
        "会話になっていません。",
        "あまり賢くない。",
        "つかえないなあ",
        "答えになっていません。",
        "何言ってるの?"
      ]
    },
    {
      "_id": "scrum_training",
      "message": "私は把握してませんので、外部サイトに問い合わせてみます。 <a target=\"_blank\" href=\"http://www.i-learning.jp/search.html?query=%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0\">こちら</a> をクリックしてください。",
      "questions": [
        "スクラムの研修を受講したい",
        "スクラムの研修コースを推薦してください"
      ]
    },
    {
      "_id": "scrum_user_story",
      "message": "ユーザーストーリーとは、さまざまな種類のプロダクトパックログアイテム(特にフィーチャー)に期待されるビジネス価値を表現する便利な形式だ。ビジネス側と技術側の両者が理解しやすいように作られている。単純な構造であり、会話を進めるうえで非常に優れたプレースホルダーとなっている。また、さまざまな粒度で記述できるので、段階的に改良もしやすい。ユーザーストーリーがニーズに合致しているとしても、それがプロダクトパックログアイテムを表現する唯一の方法というわけではない。ユーザーストーリーとは、アジャイル開発の原則とニーズを効率よく結び付ける軽量なアプローチにすぎない。私は要件を詳細化するにあたって、重要と思われたり、役に立つと思われたりするあらゆる情報を記録するために、ユーザーストーリーを使用している。ユーザーストーリーが特定の用途(たとえば不具合を説明するなど)に限定されているのであれば、私は別のアプローチを使うだろう。たとえば、次のようなユーザーストーリーを占いているチームを見たことがある。「顧客として、システムはデータベースを壊さないこと」。ユーザーストーリーが適切ではないということは誰の目にも明らかだと思う。この場合は、障害管理システムを参照したほうが適切である。結局のところ、ユーザーストーリーとは何なのだろうか。Ron Jeffriesが単純だが十分役に立つ考え方を紹介している[Jeffries 2001]。彼はユーザーストーリーを3つのCで表している。カード(card)と対話(conversation)と確認(confirmation)だ。",
      "questions": [
        "ユーザーストーリーとは何ですか。",
        "ユーザーストーリーとは？",
        "ユーザーストーリーについて教えて。"
      ]
    },
    {
      "_id": "scrum_essence",
      "message": "スクラムの基礎には、コアとなる価値、原則、プラクティスの小さなまとまりがある(それらが集まって、スクラムのフレームワークとなる)。スクラムを用いる組織は、そのスクラムフレームワークをすべて受け入れなければならない。組織全体で一斉に受け入れることはできないだろうが、スクラムを最初に使うことになるチームは、必ずそうしなければならないのだ。ただし、スクラムのすべてを受け入れるといっても、紋切り型の万能なやり方にすべて従わなければならない、ということではない。自分たちでどのようなアプローチを組み合わせるべきかがわかるまでは、スクラムフレームワークを忠実に守ったほうがよい、ということなのだ。『エッセンシャルスクラム』では、スクラムの価値、原則、プラクティスと、現場で、効果のあったアプローチを組み合わせて使っている。こうしたアプローチはスクラムフレーワークと整合性は取れてはいるものの、スクラムフレームワークにとって必須というわけではない。読者の置かれた状況に合うものもあれば、合わないものもあるだろう。読者の置かれた状況に合わせて、検査と適応が必要なのだ。",
      "questions": [
        "スクラムの本質って何ですか。",
        "スクラムの本質とは？"
      ]
    },
    {
      "_id": "scrum_master",
      "message": "スクラムマスターは、スクラムの価値、原則、プラクティスを関係者全員が理解し、受け入れるよう手助けをする。コーチとして振る舞い、プロセスについてリーダーシップを発揮して、スクラムチームや組織がパフォーマンスの高い、組織独自のスクラムアブローチを育てられるようにする。同時にスクラムマスターは、スクラムマスターは、ファシリテーターとして、チームが課題を解決しスクラムの利用を改善できるように手助けをする。さらに、外部から横やりを入れられることがないようにチームを守り、インベディメントを取り除くときにリーダーシップを発揮する。そうすることで、チームの生産自が妨げられないようにする(各自が自分で解決できる場合はその限りではない)。スクラムマスターは、チームをコントロールする役割とは異なる。スクラムマスターはマネージャーではなく、リーダーとして機能するのだ。",
      "questions": [
        "スクラムマスターについて教えて。",
        "スクラムマスターの役割って何ですか。"
      ]
    },
    {
      "_id": "scrum_product_owner",
      "message": "プロダクトオーナーは、プロダクトのリーダーシップの権限を与えられている。どのフィーチャーや機能をどの順番に構築するかを判断する責任を持つのは、プロダクトオーナーだけだ。プロダクトオーナーは、スクラムチームが達成しようとするものについて明雌なビジョンを持ち、それを関係者全員に伝える。したがって、プロダクトオーナーは、開発や保守も含めたソリューション全体を成功させる責務を負う。開発するのが外部のプロダクトであるか、内部のアプリケーションであるかは問わない。どちらの場合でも、プロダクトオーナーは最も価値の高い作業が行われるようにする義務を負う。その中には、技術的に特化した作業も合まれる。プロダクトオーナーが要求するものをチームがすばやく構築するためには、プロダクトオーナーがスクラムマスターや開発チームと積極的に協力しあわなければならない。また、質問に対してはすぐに答えられるように、その場にいなければならない。",
      "questions": [
        "プロダクトオーナーについて教えて。",
        "プロダクトオーナーの役割って何ですか。"
      ]
    },
    {
      "_id": "scrum_disorder",
      "message": "どの領域に自分がいるのかわからなければ、それは無秩序な領域にいるということだ。この領域は危険である。置かれている状況をどう理解すればよいかわからないからだ。このような場合、自らの個人的な好みに基づいて状況を解釈して行動する傾向にある。ソフトウェア開発においては、フェーズご、とに順次進めるアブローチに慣れているので、それを好む人が多い。しかし、そのアプローチは単純な領域に当てはまるものだ。第3章で議論するように、残念ながらこのアプローチはソフトウェア開発ではほとんどうまくいかない。無秩序な領域から脱出するためには、状況を構成要素に分解して、それぞれをその他の4つの領域に当てはめることだ。無秩序な領域にスクラムを適用しようとしてはならない。そこから脱出しようとすることだ。",
      "questions": [
        "どの領域か分かりません。",
        "無秩序な領域とは何ですか。"
      ]
    },
    {
      "_id": "scrum_chaos",
      "message": "カオスな問題には、すばやい対応が必要だ。危機に瀕しているので、これ以上の被害を食い止め、何らか秩序を回復するために、すばやい対応が求められる。たとえば、私たちのプロダクトのアルゴリズムに誤りがあり、間違った結果を出力していると、どこかの大学が論文を発表したと想定してほしい。顧客は、私たちのプロダクトの結果に基づいて現実的にビジネス上の投資を行っており、巨額の損失について訴訟を起こす準備をしている。アルゴリズムを設計したリーダーは、休暇でボルネオ島のジャングルにいて、あと2週間は連絡が取れない。このような場合、スクラムではうまくいかない。作業のパックログの優先順位を付けて、次のイテレーションでやるべき作業を判断するような状況ではない。出血を止めるために、決断力を持って迅速に行動する能力が必要なのである。カオスな問題に対しては、その状況と行動に対して、誰かが責任を負わなければならない。",
      "questions": [
        "カオスな領域とは？",
        "カオスな領域とは何ですか。",
        "カオスな領域について教えて。"
      ]
    },
    {
      "_id": "scrum_complex",
      "message": "複雑な問題を扱うときには、物事を予期できないことのほうが多い。正解があるとしても、後でふりかえって初めてわかるのだ。これは創発的な領域である。当の問題についてどう学ぶかを模索する必要があり、そのうえで、学習に基づき、検査と適応を行うのだ。複雑な領域に取り組むには、創造的で革新的なアプローチが必要だ。同じことを繰り返すような型にはまったアプローチでは、単純にうまくいかない。実験のために安全に失敗できる環境を作り、重要な情報を見つけ出せるようにする必要がある。こうした環境では、交流と会話を緊密に行うことが欠かせない。革新的な新製品開発はこのカテゴリに当てはまる。既存のプロダクトに革新的な新しいフィーチャーを追加する場合も同様だ。スクラムは、特にこの複雑な領域に取り組むのにうまく当てはまる。こうした状況では、探索して(調査)、理解し(検査)、反応する(適応)ことが欠かせないのだ。",
      "questions": [
        "複雑な領域とは何ですか。",
        "複雑な領域について教えて。"
      ]
    },
    {
      "_id": "scrum_simple",
      "message": "単純な問題を扱うときには、誰の目にも因果関係がはっきりしている。正解が明らかで疑う余地がないこともよくある。これは、正統的なベストプラクティスの領域だ。ソリューションがわかっているので、ある白置かれている状況を分析すれば、あらかじめ定義された適切なソリューションのどれを用いればよいかがわかる。スクラムは、単純な問題にも用いることができるが、この種の問題では、最も効率的というわけではない。適切に定義され、反復可能な手順が組み合わせられたプロセスを用いたほうがうまくいく。たとえば、同じプロダクトを繰り返し製造したいのであれば、適切に定義された組み立てラインプロセスのほうがスクラムよりも合うだろう。あるいは、商用の既存のプロダクトを顧客の環境にデプロイするのがこれで10固めということであれば、プロダクトをインストールして設定する手順を適切に定義して繰り返すほうがうまくいくに違いない。",
      "questions": [
        "シンプルな領域とは？",
        "単純な領域とは何ですか。",
        "単純な領域について教えて。"
      ]
    },
    {
      "_id": "scrum_complicated",
      "message": "込み入った問題は、専門家が活躍する適切なプラクティスの領域だ。正解は複数あるだろうが、それを明らかにするためには専門家による分析が必要となる。スクラムでもそうした問題に対応することはできるが、スクラムを用いることが最善というわけではないかもしれない。たとえば、システム全体のパフォーマンスを最適化するためにパラメータを調整するような作業は、専門家を集めて状況を分析してもらい、いくつかの選択股を検討し、適切なプラクティスに基づくのがよいだろうo日々のソフトウェアの保守作業(製品サポートや不具合対応)は、ほとんどがこのカテゴリに当てはまる。また、シックスシグマのような戦術的・定量的アプローチの多くは特にうまくいく。ただし、こうした戦術的なアプローチは単純な領域にもうまく当てはまる。",
      "questions": [
        "込み入った領域とは？",
        "込み入った領域って何ですか。"
      ]
    },
    {
      "_id": "scrum_reason",
      "message": "第ーに、ゲノミカ社がそれ以前に採用していた開発アプローチは、単純にうまくいかないことが明白だった。これはよくないほうの理由だ。後述するよいほうの理由には、誰もが同意するだろう。ゲノミカ社が扱っていたのは複雑なドメインで、わかっていることよりも、わからないことのほうが多かった。つまり、これまで作られたことのないプロダクトを作っていたのだ。私たちが焦点を合わせていたのは、研究を生業とする科学者たちが未知の分子を発見するうえで役立つような、最先端で、絶え間なく進化する、最新鋭の技術だった。求められていたのは、新しい着想やアプローチをすばやく調査し、どのソリューシヨンが有効なのかを高速に学ぶ方法だった。私たちには戦略的に協業していたパートナーがいたので、彼らに対して数週間に一度は成果を見せ、フィードバックを受け取る必要があった。私たちのプロダクトは、DNAシーケンサーの心臓部と統合する必要があったのだ。このように、調査とフィードパックをすばやく行う必要があったため、これまでに行っていたような事前に詳細な計画を立てる方式とはうまく合わなかったのだ。また、私たちは巨大なアーキテクチャ設計を事前に行いたくなかった。ゲノミカ社は以前、次世代のコアとなるプロダクトを作るための取り組みとして、アーキテクチャ策定だけにほぼ一年を費やし、生命情報工学的な統一基盤を作ろうとしていた。実際に科学者が使うアプリケーションをそのアーキテクチャに載せるときになって、数箇月前に行った設計判断が正しかったかどうかが関われることになったのだが、画面上のある項目から別の項目にカーソルを移すのに42秒かかってしまった。想像してほしい。一般的にユーザーは辛抱が苦手なものだが、博士号を持った分子生物学者が42秒も待たされたらどうなることか!あれはひどかった。私たちには、以前とは異なる、よりバランスの取れたアプローチが必要だったのだ。事前の設計を創発的な設計とジャストインタイムで組み合わせることのできるアプローチだ。同様にチームも、より機能横断的にしたかった。それまで、ゲノミカ社はたいていの組織と同じように運営されていた。開発部隊が作業が完了させ、それからテストチームに引き継いでいたのだ。チームメンバーには、もっと頻繁に協業してほしい。毎日協業するようになることが目標だ。それまで、エラーが起きる原因、重要な課題について論じるのが開発Jq!Jmの後のほうになりすぎてしまうことにあった。別々の領域に属する人同士が会活する機会が十分になかったのだ。こうした己とに別の理由も1mわって、ゲノミカ社にはスヲラムがぴったり合うだろうと判断したのだ。",
      "questions": [
        "なぜスクラムなのか？",
        "ゲノミカ社がスクラムを採用した理由は？"
      ]
    },
    {
      "_id": "アジャイルプラクティス_1",
      "message": "状況の変化にすばやく適応できる能力のことだ。サーファーは、予想よりも早く波が砕けても適応できなければならない。開発者なら、想定外の早さで設計が破綻しでも適応できなければならない。",
      "questions": [
        "アジャイルであることとは？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_2",
      "message": "2001 年2 月、17 人の同志がユタ州のスノーバードに集まった。会合の目的は、当時軽量プロセス(Lightweight Processes)と総称されていた新たなソフトウェア開発の動向について話し合うことだった。そのころアンディたちは、中間成果物の多さの割には最終成果物が少ない重厚長大な開発方法論のせいで、数々のプロジェクトが失敗するのを目の当たりにしていた。もっと優れた関発方法論があるはずだ。重要度の高い事柄に注力し、重要度の低い事柄( 貴重な時間を浪費するばかりで、大して成果の出ない事柄) には労力を割かないようにする方法論が。<br>17 人はそれにアジャイルという名前を与え、アジャイルマニフェストを発表した。<br>アジャイルマニフェストでは、ソフトウェア開発で重視するものを改めて考え直した。<br>重視するのは、人、人と人との交流と協調、適応力、動作するソフトウェアだ。",
      "questions": [
        "アジャイルの本質とは？",
        "どこで生まれた",
        "アジャイルマニフェスト",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_3",
      "message": "アジャイルなアプローチとは、適応力と協調を重んじる人々が、一丸となって目に見える具体的な目標( きちんと動作するソフトウェア)に向かっていくことである。これがアジャイルの本質だ。開発がアジャイルになると、開発現場で重点を置くものが、計画を絶対視する(plan-based) 方式から、より自然で継続的なスタイルへと変化していく。アジャイル開発では、チームのメンバー( およびチームと共に作業するメンバー)全員が、プロジェクトで明確な結果を出すことを目指すプロフェッショナルであることを前提としている。",
      "questions": [
        "アジャイルなアプローチとは？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_4",
      "message": "アジャイル開発において、必ずしも全員が経験豊富なプロフェッショナルではないかもしれない。しかし、プロフェッショナルとしての意識を持ち、自らの持てる力を最大限に発揮したいという意欲に満ちている。",
      "questions": [
        "アジャイルは全員がプロフェッショナルである必要があるのか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_5",
      "message": "ずる休み、手抜き、あからさまなサボりに悩まされているチームには、アジャイル開発は合わないと思う。そんなチームに必要なのは、もっと鈍重で時間のかかる、生産性の低い開発プロセスだ。<br>あなたが胸を張って「うちのチームはそんなんじゃない」と言えるなら、アジャイルなスタイルで開発を始められる。<br>アジャイルな開発スタイルとは、つまりこういうことだ。プロジェクトの最後にまとめてテストしない。統合を月末まで延期しない。コードを書き始めたからといって要求やフィードパックの反映を止めない。",
      "questions": [
        "アジャイルに向いてないチーム",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_6",
      "message": "アジャイルなプロジェクトの開発は、これまでとは違って、プロジェクトのライフサイクル全体を通じて、あらゆる作業を継続的に実行するんだ。そもそもソフトウェアというものは、ユーザが使い続ける限り、本当の意味で「完成」することはない。だから、ソフトウェアの開発はもはやプロジェクトですらないといってもいい。<br>ソフトウェア開発は継続的なものなんだ。フィードパックも継続的だ。<br>問題を発見するまでに何カ月も待つ必要はない。まだ傷が浅いうちに見つけ出し、すばやく修正する。<br>見つけたその時、見つけたその場で、だ。これがアジャイルな開発スタイルだ。<br>",
      "questions": [
        "アジャイルなプロジェクト",
        "アジャイルな開発スタイル",
        "継続的な開発",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_7",
      "message": "どんなときも、最初に最大の難問へ取り組みなさい。簡単なものは後回しでよいのです。",
      "questions": [
        "どこから始めるか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_8",
      "message": "非難してもバグは直りません。<br>誰かの後る指をさすのではなく、自分のできる解決策に注力しなさい。大事なことは、意味のある成果をあげることです。",
      "questions": [
        "非難したい人がいる",
        "非難したいバグがある",
        "俺のせいじゃない",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_9",
      "message": "応急処置の誘惑に打ち勝ちなさい。<br>いつでもきれいな状態のコードを見せられるように全力を尽くしなさい。",
      "questions": [
        "時間がない",
        "コードが汚い",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_10",
      "message": "批判するならアイデアになさい、人ではなく<br>誰のアイデアが優れているかを競うのではなく、解決策を導き出せたことに誇りを持ちなさい。",
      "questions": [
        "批判したい",
        "嫌いな人がいる",
        "納得できない",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_11",
      "message": "正しいことをしましょう。<br>誠実に、勇気を出して真実を伝えなさい。時にはそれが難しいこともあるでしょう。だからこそ勇気が必要なのです。",
      "questions": [
        "言いたいことが言えない",
        "ポイズン",
        "勇気が出ない",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_12",
      "message": "へラクレイトス日く、「変化せぬものは変化のみ」。これは有史以来の真実だが、とりわけ現代にはこの言葉が似つかわしい。この業界は絶え間なく変化し、活気に溢れている。「自分はコンピュータサイエンスや関連する専門分野の専攻だったから、もう学ぶべきことなどない」などと思っているようなら、それは勘違いにもほどがあるというものだ。",
      "questions": [
        "レガシー",
        "変化したくない",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_13",
      "message": "技術の変化に付いていきましょう<br>あらゆる分野のエキスパートになる必要はありませんが、業界がどこへ向かっているのかは把握しておきなさい。それを踏まえて自分のキャリアとプロジェクトの計画を立てるのです。",
      "questions": [
        "キャリアパス",
        "今後",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_14",
      "message": "あなた自身とチームのレベルを引き上げましょう<br>ブラウンバッグミーティングを活用してメンバーの知識とスキルを高め、チームの結束を固めるのです。プロジェクトにプラスとなる技術や手法にチームの関心を向けさせるのです。",
      "questions": [
        "独り占めしたい",
        "教えたくない",
        "属人的が良い",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_15",
      "message": "新しきを学び、古きを捨てましょう。<br>新しい技術を学ぶときには、足を引っ張りかねない古い習慣を捨てなさい。自動車は馬車とは別次元のものであって、単に馬のついていない馬車というわけではないのです。",
      "questions": [
        "習慣",
        "慣習",
        "踏襲",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_16",
      "message": "なぜ? と問い続けなさい。言われたことを額面どおりに受け取ってはいけません。問題の担本を理解す<br>るまで質問し続けるのです。<br><br>「Fifth Discipline FieldBook」では、こうした根本原因分析の一例が紹介されている。<br>あるコンサルタントが製造工場の管理者に聞き取りをした時の話だ。<br>床に油がこぼれているのを目にした管理者は、最初の反応として、それを消掃するよう指示した。<br>一方、コンサルタントはこう尋ねた。「なぜ床に油がこぼれているのでしょうか? 」<br> 質問の主旨を捉えかねた管理者は、消掃担当者の怠慢を叱責した。コンサルタントは再び尋ねた。「なぜ床に油がこぼれているのでしょうか? J」<br>部門を横断して大勢の従業員に対して果敢に「なぜ? J を繰り返し聞い続けた結果、<br>コンサルタントはついに問題の真相を突き止めた。購買条件の記述が不十分だったせいで、<br>不備のあるガスケットが大量に購入されていたのだ。この結末は、管理者をはじめすべての関係者にかなりの街曜を与えた。思いもよらないことだったのだ。おかげで深刻な問題が白日の下にさらされた。この問題が放置されていたら事態はさらに悪化し、損害も鉱大していただろう。<br>今回、コンサルタントがしたことは「なぜ? J と尋ねること、それだけだった。",
      "questions": [
        "質問",
        "疑問",
        "なぜ？",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_17",
      "message": "アジャイル開発者は、さまざまな情報源からフィードバックを得る。ユーザ、チームメンパ一、それからテストされているコード。こうしたフィードパックを活用することで、プロジェクトの進む方向を調整できる。これら具体的なフィードパックに加えて、流れていった時間そのものからも、きわめて重要な形のフィードバックが得られる。<br>アジャイルの手法の多くは、タイムボックス化をベースとしている。『タイムボックス化』とは、作業に対して短期間の、厳しい締め切りを設定することだ。締め切りの延長はなしだ。どこで作業の帳尻を合わせるかは自分で選ぶことができる。だが、締め切りは固定だ。すべての作業を完了させるまでにタイムボックスがいくつ必要なのか、正確な数はわからない場合がほとんどだろう。それでも、個々のタイムボックスの期聞は短く限定しておく。タイムボックスごとに、はっきりとした目標を設定して成果をあげ<br>ていくんだ。<br>例えば、よくあるイテレーションの長さは数週間だ。最終日を迎えたらイテレーションは終了する。イテレーションの長さは固定だが、あるイテレーションでどの機能に取り組むかは柔軟に決めていい。別の言い方をすれば、日付は動かせないが、機能は動かせるということだ。同じやり方で設計ミーティングもタイムボックス化できる。つまり、所定の時聞が来たらミーティングは終了し、その時点で設計をどうするかが決まっているということだ。厳しい締め切りが設定されれば、とにかく選択せざるを得ない。哲学的な議論や、いつまでたっても進捗率80 パーセントの機能にかまけて時聞を浪費するわけにはいかなくなる。タイムボックスが物事を前進させるんだ。<br>サメは泳ぎ続けなければ死んでしまう。その意味では、ソフトウェアプロジェクトもサメみたいなものだ。その都度その都度での最良の情報を活用して、前進し続けなければならない。",
      "questions": [
        "タイムボックス",
        "リズム",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_18",
      "message": "顧客に決断してもらうのです。<br>開発者、マネージャ、業務アナリストは、ビジネスに重大な影響を及ぼす決定を下すべきではありません。事の詳細を、ビジネスの担い手に理解しても<br>らえる言葉で伝えたうえで、顧客に決断してもらうのです。",
      "questions": [
        "決断",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_19",
      "message": "優れた段計は地図です。少しずつ発展させるのです。<br>設計は、正しい方向を示す道しるべではありますが、土地そのものではありません。<br>具体的な道順を事細かに指定すべきものでもありません。設計(または設計者) に囚われてはいけません。",
      "questions": [
        "設計書",
        "ドキュメント",
        "厳密",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_20",
      "message": "いついかなる時でもプロジェクトをリリース可能な状態にしておくのです。<br>プロジェクトを常に、コンパイルが通り、実行可能で、テストも通っていて、突然のデプロイ要請にも迅速に対応できる状態にしておきなさい。",
      "questions": [
        "リリース可能",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_21",
      "message": "はやめに統合すれば、サブシステム問の相互作用と連携がどうなっているのかを確認できる。データのやり取りや共有の方法も実際に調べられる。統合にあたって解決すべき課題を早く把握できれば、早い段階で対処できるし、修正の手間も比較的少なくて済む。これは、3 人の開発者で5 万行のコードベースを手がける場合であっても、5 千人で3 千万行を手がける場合でも同じだ。ところが統合を先延ばしにしていると、こうした統合にまつわる問題は手に負えないものになりかねない。対処しようにもコードの修正が広範囲にわたって必要になってしまい、納期の遅れや混乱を招いてしまうのだ。",
      "questions": [
        "コードの統合",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_22",
      "message": "頻繁にフィードバックを得よう。イテレーションの周期が四半期や1 年では長すぎる。<br>1 回のイテレーションの長さは、1 週間か2 週間にすること。アプリケーションについて顧客からフィードパックを得ることに積極的になろう。たとえまだ実装が不十分な機能があったとしても、見せることで何らかのフィードパックを得られるからだ。",
      "questions": [
        "デモ",
        "フィードバック",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_23",
      "message": "インクリメンタルに開発しなさい。<br>最小限だけれども、きちんと使える機能を備えた製品をリリースしなさい。<br>各インクリメントの開発では、1～4 週間周期のイテレーションをまわすのです。",
      "questions": [
        "開発の単位",
        "インクリメンタル",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_24",
      "message": "■ユニットテストは索早いフィードバックを提供する。<br>　コードは何度も繰り返し実行される。コードの変更や書き直しを行っても、元の振る舞いを壊していないことをテストケースが保証する。もし何か問題があれば、すぐに確認して修正できる。<br>■ユニットテストはコードを堅牢にする<br>　テストは、正常ケース、異常ケース、例外ケースの実行を通してコードの振る舞いを徹底して考えるのに役立つ。<br>■ユニットテストは役に立つ設計ツールである<br>　ユニットテストは、実用的でシンプルな設計の実現にも役立つ。<br>■ユニットテストは開発者の自信を強める<br>　コードをテストすることで、さまざまな条件での振る舞いを試すことになる。おかげで、厳しいスケジュールでプレッシャーのきつい、新しい作業に直而したときであっても、自信を持って取り組める。<br>■ユニットテストは問題解決時には探査装置となる<br>　ユニットテストは、いわばプリント基板のテストに使うオシロスコープのプロープと同じような役割を果たす。問題が発生したらすぐに、コードの内部動作のパルスを測定できる。これは問題を突き止めて解決するための自然なやり方だ。<br>■ユニットテストは信頼のおけるドキュメントである<br>　新しいAPI を知るにあたっては、そのAPI のユニットテストを正確で信頼のおけるドキュメントとして活用できる。<br>■ユニットテストは学習教材である<br>　新しいAPI を使い始めるときには、そのAPI のテストを作成することから始めると、学習効果を高められる。こうしたラーニングテスト( 学習テスト) は、API の動作を理解するためだけでなく、後になって互換性のない変更が加えられたときに、それをすばやく検出するのにも役立つ。",
      "questions": [
        "ユニットテスト",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_25",
      "message": "あらゆる不満に真実が潜んでいるのです。<br>その真実を見つけ出し、本当の問題に対処なさい。",
      "questions": [
        "顧客の声",
        "ユーザーの声",
        "ユーザの声",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_26",
      "message": "Scrum では、チームメンバーと非チームメンバーの役割を、それぞれブタとニワトリと名付けている。チームメンバーがブタ( これはいい名前I) で、非チームメンバー( マネージャ、サポート、品質保証担当など) がニワトリだ。ブタとニワトリという表現は、一緒にレストランを開こうとしている家畜の寓話にちなんでいる。レストランで朝食にベーコンエッグを出そうとすれば、ニワトリも確かに手を貸すが、プタにはコミットメントが求められる。ニワトリは卵を産むだけでいいが、プタの方は命がけだ。<br>Scrum ではr「ブタ」だけがスタンドアップミーティングに参加できる。",
      "questions": [
        "ブタ",
        "ニワトリ",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_27",
      "message": "まともな設計は積極的にコードを書くプログラマから生まれます。<br>本物の洞察は、実際にコードを書くことからもたらされます。コーディングしないアーキテクトと一緒に仕事をしないように。システムの実態を知らずにまともに設計なんでできません。",
      "questions": [
        "まともな設計",
        "アーキテクト",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_28",
      "message": "メンターになりましょう。<br>自分の知識をほかの人たちと分かち合うのは楽しいことです。与えることで得られるものがあります。ほかの人たちを刺激して、もっと良い結果を出せるようにしなさい。チーム全体の能力を高めるように努めなさい。",
      "questions": [
        "教えたくない",
        "分かち合いたくない",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_29",
      "message": "みんなに問題を解決する機会を与えなさい。<br>解決策を与えるのではなく、正しい方向に導くのです。その過程で誰もが何かを学ぶことができます。",
      "questions": [
        "教え方",
        "答えを教える",
        "学び",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_30",
      "message": "あらゆることをみんなに知らせましょう。<br>自分の状況、アイデア、関心のある事柄などを公開しなさい。ほかの人たちから仕事の状況を尋ねられるまで黙っていてはいけません。",
      "questions": [
        "透明性",
        "情報の共有",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_1",
      "message": "知りません、まずはググってみて再度質問してください。",
      "questions": [
        "アジャイルってどうなのかね？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_2",
      "message": "わかりません、儲かるか儲からないかは人次第です。",
      "questions": [
        "アジャイルってっ儲かるの？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_3",
      "message": "そうですね、やらないほうが良いと思います。",
      "questions": [
        "アジャイルやりたくないんだけど",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_4",
      "message": "仕様変更が辛いのはウォーターフォール型の開発です。<br>あなたのそれはアジャイル的な開発じゃないかもしれません。<br>なにが「つらい」のか具体的に教えて下さい。",
      "questions": [
        "アジャイルやると仕様変更対応がつらいんだよね",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_5",
      "message": "まずAmazonでアジャイルと名の付く書籍を調べ、５冊以上それぞれ２周読んできてください。<br>話はそれからです。",
      "questions": [
        "俺にもわかるようにアジャイルを説明しろ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_6",
      "message": "ゴールやビジョンを明確化して意思決定は現場に委ねましょう。<br>さまざまな見える化のテクニックを学び、現場負担の少ないように遠くから見守りましょう。",
      "questions": [
        "詳細な管理がしたい",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_7",
      "message": "上位レベルの意図を正しく伝えることだけに注力してください。<br>どう行動に起こすかは現場に決めてもらいましょう。",
      "questions": [
        "詳細な指示をしたい",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_8",
      "message": "明確な方向性を示してください。入念な調査を行うことは予測精度の向上ではなくコミットメントする内容の詳細化に他なりません。",
      "questions": [
        "入念な調査のもと計画化したい",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_9",
      "message": "ある特定の信仰にしたがって動くことは宗教と捉えられることもあるかもしれません。<br>チームメンバーが同じ価値観にしたがって行動することに意味があります。",
      "questions": [
        "なんか宗教っぽくないですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_10",
      "message": "あなたは会社の代表として発言をしているのでしょうか？<br>そうでなければ目の前の仕事をしてください。<br>もしくは向いていない理由を一から説明してみて下さい、話はそれからです。",
      "questions": [
        "アジャイルはうちの会社には向いてないよ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_11",
      "message": "できるできないよりも、やるかやらないか。<br>やるかやらないかよりも、やりたいかやりたくないのかが重要です。",
      "questions": [
        "スキルが低くてもアジャイルってできますか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_12",
      "message": "異なる価値観を持つ人同士では、場合によって攻撃的だと受け取られることもあるかもしれません。<br>アジャイルはウォーターフォール型開発のアンチテーゼ的な位置づけであり、考え方ややり方の多くは従来を否定することになるかもしれません。神社の方に「キリストが神です」と説くようなものです。",
      "questions": [
        "アジャイル界隈の人って攻撃的ですよね",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_13",
      "message": "人員の選定や育成、フィードバック、衝突の解決から激しい議論の誘発とコントロールなどに注力してください。また指示や管理を抑え、ビジョンの共有や協調性の強化を促進してください。開発チームの邪魔にならないよう、規則遵守作業を受け持つなど縁の下の力持ちとなってください。",
      "questions": [
        "マネージャーってなにするの？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_1",
      "message": "スクラムチームは、プロダクトオーナー・開発チーム・スクラムマスターで構成される。スクラムチームは自己組織化されており、機能横断的である。自己組織化チームは、作業を成し遂げるための最善の策を、チーム外からの指示ではなく、自分たちで選択する。機能横断的チームは、チーム以外に頼らずに作業を成し遂げる能力を持っている。スクラムにおけるチームのモデルは、柔軟性・創造性・生産性を最適化するように設計されている。<br>スクラムチームは、プロダクトを反復的・漸進的に届ける。これは、フィードバックの機会を最大化するためである。「完成」したプロダクトを漸進的に届けることで、動作するプロダクトを常に利用可能な状態にする。",
      "questions": [
        "スクラムチーム",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_2",
      "message": " プロダクトバックログアイテムを明確に表現する。<br> ゴールとミッションを達成できるようにプロダクトバックログアイテムを並び替える。<br> 開発チームが行う作業の価値を最適化する。<br> プロダクトバックログを全員に見える化・透明化・明確化し、スクラムチームが次に行う作業を示す。<br> 必要とされるレベルでプロダクトバックログアイテムを開発チームに理解してもらう。<br>上記の作業は、プロダクトオーナーが行う場合もあれば、開発チームが行う場合もある。いずれの場合も、最終的な責任はプロダクトオーナーが持つ。",
      "questions": [
        "プロダクトオーナーの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_3",
      "message": "プロダクトオーナーの支援<br> 効果的なプロダクトバックログの管理方法を探す。<br> 明確で簡潔なプロダクトバックログアイテムの必要性についてスクラムチームに理解してもらう。<br> 経験主義におけるプロダクトプランニングについて理解する。<br> 価値を最大化するためにプロダクトバックログを調整する方法を知っている。<br> アジャイルを理解・実践している。<br> 必要に応じてスクラムイベントをファシリテートする。<br><br>開発チームの支援<br> 自己組織化・機能横断的な開発チームをコーチする。<br> 開発チームが価値の高いプロダクトを作れるように支援する。<br> 開発チームの進捗を妨げるものを排除する。<br> 必要に応じてスクラムイベントをファシリテートする。<br> スクラムがまだ完全に適用・理解されていない組織環境で、開発チームをコーチする。<br><br>スクラムマスターは、さまざまな形で組織を支援する。<br> 組織へのスクラムの導入を指導・コーチする。<br> 組織へのスクラムの導入方法を計画する。<br> スクラムや経験的プロダクト開発を社員や関係者に理解・実施してもらう。<br> スクラムチームの生産性を高めるような変化を促す。",
      "questions": [
        "スクラムマスターの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_4",
      "message": " スプリントゴールに悪影響を及ぼすような変更を加えない。<br> 品質目標を下げない。<br> 学習が進むにつれてスコープが明確化され、プロダクトオーナーと開発チームの交渉が必要になる可能性がある。<br>スプリントは1か月以内のプロジェクトと考えることができる。プロジェクトと同様に、スプリントは何かを成し遂げるために使うものである。<br>",
      "questions": [
        "スプリントの目的",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_5",
      "message": "スプリントの作業はスプリントプランニングで計画する。これはスクラムチームの共同作業だ。<br>スプリントが1か月の場合、スプリントプランニングのタイムボックスは最大で8時間である。スプリントの期間が短ければ、スプリントプランニングの時間も短くすることが多い。スクラムマスターは、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。<br>スプリントプランニングでは、以下の質問に答える。<br> スプリントの成果であるインクリメントで何を届けることができるか？<br> インクリメントを届けるために必要な作業をどのように成し遂げるか？",
      "questions": [
        "スプリントプランニング",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_1",
      "message": "スクラムはアジャイルな製品開発に導くためのフレームワークです。<br>活発で楽しく、より協調しながらビジネス目標を実現するための基礎と道筋を示すものです。まだスクラムを使っていないのなら覚えていないかもしれませんが、スクラムを使うと再び楽しみながら仕事することができます！スクラムはソフトウェア開発の心得が元ですが、多くの他の業界でもこのフレームワークは採用されています。 実際、教育やマーケティング、運用業務などにもスクラムは採用され親しまれています。",
      "questions": [
        "スクラムとは何か？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_2",
      "message": "スクラムのコンセプトは1986年に「より新しい商品開発ゲーム」（ハーバード・ビジネス・レビュー、1986年1月/ 2月）で、竹内 弘高と野中 郁次郎によって初めて世界に発信されました。彼らはそのアプローチを「柔軟で総合的な製品開発戦略」と定義し、迅速で柔軟な製品開発をもたらすと提唱しました。彼らは、ラグビーの試合のように1つの機能横断的なチームが「ゴールライン」への道のりの中で「ボール」を前後にパスすることから、総合的な「ラグビー」アプローチと呼びました。これは、厳密に線形的な方法で進歩させるアプローチとは明らかに対照的でした。",
      "questions": [
        "スクラムの由来は？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_3",
      "message": "2001年、アジャイルの共通の価値を見出そうとする17人がユタのワサッチ山脈に集まりました。彼らはアジャイルソフトウェア開発宣言の発展につながる4つの共通の価値に到達しました。",
      "questions": [
        "アジャイルマニュフェストとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_4",
      "message": "スクラムはアジャイルのフレームワークであり、アジャイル・マニフェストの価値と一致しています。以下4つです。<br>・「プロセスやツールよりも個人との対話を」<br>・「包括的なドキュメントよりも動くソフトウェアを」<br>・「契約交渉よりも顧客との協調（協業）を」<br>・「計画に従うことよりも変化への対応を」",
      "questions": [
        "コアスクラムとアジャイルソフトウェア開発宣言からの共通の価値は何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_5",
      "message": "スクラムは、ビジネスに価値をもたらすためのチームベースのアプローチです。チームメンバーは協力しながらビジネス目標を共有します。スクラムフレームワークは、チームメンバー間の効果的なやりとりを促進し、チームがビジネス価値をもたらすようにします。<br>チームがビジネス目標を達成すること、それは<br>・生産性を定量化すること<br>・作業すること<br>・途中で何が起きているのかを特定すること<br>・その範囲内のすべての困難を解決する責任を負うこと<br>・ 組織外の懸念を解決するために組織の他の部分と協力すること<br>スクラムのチームがこれらの責任に焦点を当てることがとても重要です。",
      "questions": [
        "「プロセスやツールよりも個人との対話を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_6",
      "message": "スクラムでは、すべてのスプリントの主な結果として、インクリメントが必要です。 <br>どのような活動がスプリント中に行われても、焦点はプロダクトインクリメントの作成にあります。スクラムチームの目標は、スプリントごとにインクリメントを作成することです。そのインクリメントにはまだビジネスが求める十分な機能は含まれていないかもしれませんが、チームは現在の機能が出荷可能な品質であることを保証する必要があります。<br>",
      "questions": [
        "「包括的なドキュメントよりも動くソフトウェアを」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_7",
      "message": "スクラムは、コラボレーション（共同作業）の促進を目的としたフレームワークです。<br>チームメンバーはお互いに協力し、ソフトウェアやその他の成果物を作成しながらビジネスに提供する最良の方法を探求します。<br>チーム、特にプロダクトオーナーは、利害関係者（ステークホルダ）と協力しながら製品ビジョンを検査し、（ビジョンと製品を）適合させることで、製品の価値が高まるようにします。<br>",
      "questions": [
        "「契約交渉よりも顧客との協調（協業）を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_8",
      "message": "スクラムチームは頻繁に計画を立てます。スクラムの初心者は現在のスプリントを計画し、さらに多くのチームにまたいだリリース計画やプロダクトロードマップなどの長期計画を作成します。<br>これらの計画は、チームとビジネスの意思決定に役立ちます。<br>しかし、チームの目標は、計画をやみくもに順守することではありません。目標は価値の創造と、変化を受け入れることにあります。本質は思考のプロセスとアイデアであり、計画よりも重要です。<br>早期に作成された計画は、将来利用できる情報よりも少ない情報に基づいているため、当然これは最善の計画ではない可能性があります。新しい情報が見つかると、チームはプロダクトバックログを更新します。 つまり、製品の方向性は変わる可能性があるということです。<br>継続的に計画し改善することは、経験に新しい知識を取り入れ、チームの成功の可能性を上げます。<br>スクラムチームは絶えず変化に対応し、可能な限り最良の結果を残します。スクラムはフィードバックループのフレームワークと表すこともでき、チームが絶えず検査し適応することで、製品価値を最大化します。",
      "questions": [
        "「計画に従うことよりも変化への対応を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_1",
      "message": "アジャイル開発手法は、“商品開発における学び、イノベーション、変化等、より実践に基づいた方法にすれば、より良い結果をもたらす”という信念によって生まれました。アジャイルの原則は、事前に仕様を書く多くの時間を費やすことよりも、すぐに出荷できる動く製品（ソフトウェア等）を重視します。アジャイル開発は、大きな組織階層や機能による細分化よりも、決定権が与えられた職能上の枠組みを越えたチームにし、継続的な顧客への情報提供を短期間で繰り返すことを重視します。よくアジャイル開発やスクラムを学ぶと、初心に戻ったように「そうすれば良かったのか。」と気付くことがあります。",
      "questions": [
        "アジャイル",
        "入門",
        "概要",
        "原則",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_２",
      "message": "スクラムは企業の大小に関わらず利用されています。<br>Yahoo!、Microsoft、Google、Lockheed Martin、Motorola、SAP、Cisco、GE、CapitalOne、アメリカ連邦準備銀行等が含まれます。",
      "questions": [
        "利用",
        "企業",
        "スクラム",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_3",
      "message": "スクラムは、企画や製品開発もしくはアプリケーション開発を繰り返しながら漸増するフレームワークです。<br>スプリントと呼ばれる周期で、開発を構成します。これらの繰り返し期間（スプリント）は1カ月未満で途切れることなく連続します。<br>スプリントはタイムボックス化され、作業完了の有無に関わらず、具体的な期日で終了します。決して延長されません。<br>各スプリントの始めに、職能上の枠を超えたチームは優先されるリストから（顧客の要求）項目を選びます。<br>チームは、スプリント終了までに選択した全ての項目を完了させることを公約します。スプリントの間は、選ばれた項目は変更しません。<br>毎日チームは集まって、手短に進捗を確認し、残りの仕事を終わらせるのに必要な次の作業を調整します。<br>スプリント終了時に、チームは利害関係者と共に、構築した製品を実際に用いてスプリントを検査します。<br>参加者は、次のスプリントで具現化できるフィードバックを得ます。スプリント終了時に、本当に価値のある製品が「実現」されることを強調します。<br><br>スクラムの大きなテーマは、「検査と適応」です。スクラムは開発工程を短くし、成果物と実務の有効性を検査します。<br>そして、プロダクトのゴールとプロセスを適応します。これを継続的に繰り返します。",
      "questions": [
        "概要",
        "スクラム",
        "やり方",
        "手法",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_4",
      "message": "スクラムには、プロダクトオーナー、チーム、スクラムマスターの３つの役割があります。<br>これらはスクラムチームとして知られています。",
      "questions": [
        "役割",
        "チーム",
        "スクラムチーム",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_５",
      "message": "プロダクトオーナーは、製品特性を特定し投資収益率（ROI）を最大化することに責任があります。<br>最優先リストの優先順位付けを継続的に見直し、次のスプリントのために、どの（顧客の要求）項目が上位にあるべきかを決めてます。<br>プロダクトオーナーは従来の製品管理者とは少し異なります。なぜならば、開発権限をプロジェクト管理者に委ねのではなく、自らスプリント毎に優先順位をつけ、結果を検査するなど、チームと積極的かつ頻繁に交流します。<br>スクラムでは、最終的な権限を持つプロダクトオーナーは、必ず一人であり、仕事の価値に対して責任を持つことに注意しなければなりません。",
      "questions": [
        "プロダクトオーナー",
        "オーナー",
        "責任",
        "優先順位付け",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_６",
      "message": "チームは、アプリケーションやウェブサイト等、プロダクトオーナーが示唆する製品を造ります。<br>“自己組織（自己管理）” し、とても高い自律性と製品に対して責任があります。<br>スクラムのよくある話では、チームは “ブタ”、他者は “ニワトリ” として知られています。<br>これは、「ハムエッグ」というレストランを開店しようとするブタとニワトリの物語（冗談話）からきています。<br>その物語の中でブタは「私は身を削るのに、ニワトリは少し関わるだけじゃないか。」と迷います。）<br><br>スクラムにおけるチームは、７人 ± ２人です。ソフトウェア開発の場合、チームは、分析、開発、テスト、<br>インターフェース設計、データベース設計、アーキテクチャ、書類作成等の能力を持った人で構成されます。<br>チームはプロダクトオーナーに、製品開発と製品の価値向上に関するアイデアを提供します。<br>全メンバーが、スプリント期間に１つの製品開発に１００％集中することができれば、最も生産性が高く効果的です。<br>なので、複数の企画や製品の仕事をすることを避けて下さい。<br>安定したチームには高い生産力があるので、メンバー変更は避けて下さい。多人数の集団に適用する場合では、複数のスクラムチームで構成されます。<br>綿密な調整を行い、各チームが製品の異なる特性に集中します。１つのチームが、徹底的な顧客中心思考で、全ての作業（計画、分析、プログラミング、テスト）を行います。<br>チームは、フィーチャーチームと言われることもあります。",
      "questions": [
        "チーム",
        "フィーチャーチーム",
        "ハムエッグ",
        "製造",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_７",
      "message": "スクラムマスターは、チームとプロダクトオーナーがうまくいくための支援者であり、チームの管理者でもプロジェクト管理者でもありません。<br>外部からの干渉を守り、プロダクトオーナーとチームが、スクラムを最大限に活かせるように導きます。<br>スクラムマスターは、（プロダクトオーナー、管理者を含む）全員に対し、スクラムの正しい理解と実践を支援します。<br>また、アジャイル開発で成功することを義務付けられる組織の困難な変化を牽引します。<br>スクラムは、多くの障害、チームの危険、プロダクトオーナーの有効性を明らかにします。<br>※小さいチームでは、チームメンバーが役割を果たせるかもしれません<br>どのような経歴もしくは、工学、デザイン、テスト、製品管理、プロジェクト管理、品質管理等の能力をを持っていても、優秀なスクラムマスターになれます。<br>ただし、スクラムマスターとプロダクトオーナーは、同じ人がなることはできません。<br>なぜなら、スクラムマスターがプロダクトオーナーの依頼を断ることもしなければならないからです（例えば、スプリントの途中で、新たな成果物の発表）。<br>また、スクラムマスターはプロジェクト管理者とは異なります。スクラムマスターは、何をすべきか指示したり、<br>タスクを割り当てたりしません。彼らは、工程を促進したり、チームの自己組織化と自己管理化を支援します。<br>もし、スクラムマスターが以前はチーム管理者だった場合、 スクラムで成功させるためには、<br>考え方や交流スタイルを大きく変えなければならいでしょう。",
      "questions": [
        "スクラムマスター",
        "マスター",
        "支援",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_8",
      "message": "プロダクトバックログとは、洗練された特性（項目）の優先順位リストです。<br>このバックログは、製品の存続期間を終えても残り（進化し）ます。これは、製品のロードマップです。<br>“優先順位に従って、チームが完成させた全ての項目” も含め最終的な状態を表したり、プロダクトオーナーが、利害関係者の利益やチームに影響されること等、すべての領域を考慮して優先順位付けに必要です。<br>プロダクトバックログは、様々な項目を含んでいますが、探求や調査の仕事は含まれません。<br><br>プロダクトバックログは、プロダクトオーナーによって継続的に、顧客要求の変化、新しいアイデアや洞察、競合他社の動向、技術的障害等が更新されます。<br>チームは、プロダクトバックログの各アイテムに必要な規模見積りをプロダクトオーナーに提供します。<br>さらに、プロダクトオーナーには、各項目のビジネス価値を見積る責任があります。<br><br>大抵、プロダクトオーナーはこの作業に慣れていません。この場合、スクラムマスターは、プロダクトオーナーが出来るように支援します。<br>プロダクトオーナーは、投資収益率（ROI）を最大化するため（少ない労力で、高い価値のある項目を選びます）<br>もしくは、副次的にいくつかの主なリスクを軽減するために、バックログの優先順位付けます。（実際は、リリース<br>バックログの部分集合）とすると、これらの規模と価値の見積りは、各スプリントで学ぶことによって、新しくなるかもしれません。<br>その結果、プロダクトバックログの継続的な再優先順位付けは絶えず更新されます。",
      "questions": [
        "プロダクトバックログ",
        "優先順位リスト",
        "最終系",
        "ろーふぉマップ",
        "",
        "",
        "",
        ""
      ]
    }
  ]
}