"アジャイル開発のルールとは？","agile_manifesto_Background0"
"アジャイル開発の原則とは？","agile_manifesto_Background0"
"アジャイル宣言の背後にある原則がa target=_blank href=http://agilemanifesto.org/iso/ja/principles.htmlこちら/a に記載されています。","agile_manifesto_Background0"
"アジャイルで一番大切なことは？","agile_manifesto_Background1"
"アジャイルの基本的な考え方は？","agile_manifesto_Background1"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。」・・・こちらが核になっています。そのため、この後はこのように述べられています。「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」","agile_manifesto_Background1"
"効果的にシステムを作るにはどうしたらよい？","agile_manifesto_Background10"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「シンプルさ（ムダなく作れる量を最大限にすること）が本質です。」・・・余計な機能はないほうが、変化に柔軟なシステムになります。必要で価値のあるものを作り、無駄なものをは作らない。そう、アジャイルならね。","agile_manifesto_Background10"
"アジャイル開発で個人が気を付けることは？","agile_manifesto_Background11"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。」・・・メンバー個々が責任を持って、自立的、自発的に考えて採用したものが最良なもの、ということでしょうか。","agile_manifesto_Background11"
"アジャイル開発チーム運営で気を付けることは？","agile_manifesto_Background12"
"スプリントが終わったらどうしたらいいの？","agile_manifesto_Background12"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。」・・・スクラムではスプリントの最後にふりかえりをしますね。","agile_manifesto_Background12"
"仕様変更はいつまで受けていいの？","agile_manifesto_Background2"
"仕様変更はどうしたらよい？","agile_manifesto_Background2"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」・・・この場合、アジャイル開発では変更要求を受け入れるために、開発順序、スコープを入れ替えることが必要になりますね。","agile_manifesto_Background2"
"アジャイルの開発期間はどのくらい？","agile_manifesto_Background3"
"開発期間はどう考えるの？","agile_manifesto_Background3"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」・・・価値あるものを、早く、継続的に提供するということですね。　　　　　　　　　　　　　　　　","agile_manifesto_Background3"
"アジャイル開発で顧客に求めることは？","agile_manifesto_Background4"
"開発体制はどうなるの？","agile_manifesto_Background4"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。」・・・","agile_manifesto_Background4"
"アジャイル開発時のチーム体制は？","agile_manifesto_Background5"
"どんな人をチームに採用したらいい？","agile_manifesto_Background5"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「意欲に満ちた人々を集めてプロジェクトを構成します。環境と支援を与え仕事が無事終わるまで彼らを信頼します。」・・・メンバー個々の自主性とやる気が、アジャイル開発には求められます。","agile_manifesto_Background5"
"アジャイル開発でのコミュニケーションはどうするの？","agile_manifesto_Background6"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。」・・・アジャイルでなくても、そうですよね。","agile_manifesto_Background6"
"アジャイル開発の進捗はどう管理するの？","agile_manifesto_Background7"
"アジャイル開発の進捗がわからないのですが。","agile_manifesto_Background7"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「動くソフトウェアこそが進捗の最も重要な尺度です。」・・・資料の作成度合いではなく、動くもの「価値」が提供できているかがポイントですね。","agile_manifesto_Background7"
"アジャイル開発はデスマーチにならないの？","agile_manifesto_Background8"
"スケジュールを守るにはどうしたらいい？","agile_manifesto_Background8"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「アジャイル･プロセスは持続可能な開発を促進します。一定のペースを継続的に維持できるようにしなければなりません。」・・・たとえばスクラムではスプリントの最初に何をどのくらいやるか決めますね。継続的に維持するためには、決められた期間の作業量も一定でなくてはいけません。","agile_manifesto_Background8"
"アジャイルに向いたシステムって？","agile_manifesto_Background9"
"システム構築で気をつけるべき点は？","agile_manifesto_Background9"
"開発メンバーが気をつけるべきことは？","agile_manifesto_Background9"
"『アジャイル宣言の背後にある原則』ではこのように述べられています。「技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。」・・・システムにも俊敏さが求められるので、そのような技術の採用や設計を心がけましょう。繰り返し開発することを念頭におきしましょうね。","agile_manifesto_Background9"
"アジャイル開発で重要なことって？","agile_manifesto_value"
"アジャイルソフトウェア開発宣言って何？","agile_manifesto_value"
"『アジャイルソフトウェア開発宣言』では、アジャイル開発時に重視する価値を次のように宣言しています。「プロセスやツールよりも個人と対話を」「包括的なドキュメントよりも動くソフトウェアを」「契約交渉よりも顧客との協調を」「計画に従うことよりも変化への対応を」価値とする。すなわち、左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく。・・・左記のものが要らないというわけではありませんので履き違えないようにしてくださいね。","agile_manifesto_value"
"さようなら。","general_bye"
"さよなら。","general_bye"
"またお願いします","general_bye"
"また明日。","general_bye"
"またね。","general_bye"
"特に用はないです。","general_bye"
"バイバイ。","general_bye"
"こんばんは。","general_hello"
"はじめまして。","general_hello"
"はじめまして。こんにちは。 ","general_hello"
"こんにちは。","general_hello"
"よろしくお願いします。","general_hello"
"おはようございます。","general_hello"
"何のために生きてるの?","general_howareyou"
"調子はどう?","general_howareyou"
"お元気ですか?","general_howareyou"
"ご機嫌いかがですか?","general_howareyou"
"なにやっているの?","general_howareyou"
"解決しない","general_sorry"
"答えが違います。","general_sorry"
"間違っています。","general_sorry"
"言っていることが分かりません。","general_sorry"
"会話になっていません。","general_sorry"
"あまり賢くない。","general_sorry"
"つかえないなあ","general_sorry"
"答えになっていません。","general_sorry"
"何言ってるの?","general_sorry"
"ありがとうございました。頑張ります。","general_thanks"
"ありがとう。","general_thanks"
"どうも、ありがとう。","general_thanks"
"教えてくれてありがとう。","general_thanks"
"がんばります。","general_thanks"
"感謝します","general_thanks"
"ありがとうございます。","general_thanks"
"あなたは誰ですか?","general_whoareyou"
"名前を教えてください。","general_whoareyou"
"名前は?","general_whoareyou"
"だれですか？","general_whoareyou"
"自己紹介して。","general_whoareyou"
"誰?","general_whoareyou"
"Bluemixの状況を教えて","general-bluemix-info"
"Bluemix Publicの状況を教えて","general-bluemix-info"
"ブルーミックスの状況を教えて","general-bluemix-info"
"もうかりまっか","general-bochibochi"
"スクラムの研修を受講したい","scrum_training"
"スクラムの研修コースを推薦してください","scrum_training"
"プロダクトオーナー","アジャイルサムライ_1"
"アジャイルな顧客はプロジェクトを流れていくあらゆる要求の「真実の源」だ。ソフトウェアは顧客のために作られる。顧客は問題領域の専門家であることが望ましい。業務に深く通じていて、ソフトウェアが何をするのか、どんな見た目になるのか、どんな具合に動くのかを心から気にかける人物。開発チームに確固たる指針を与え、質問に答え、フィードバックしてくれる存在。それがアジャイルな顧客だ。アジャイルな顧客は要求の優先順位づけも行う。何をいつ作るのかを決めるのは顧客だ。とはいえ、仮先順位は顧符の独断で決めるわけじゃない。開発チームとの共同作業だ。たとえば、技術的な理由から、ある機能を他の機能よりも先に実装したほうがうまくいく場合なんかは開発チームから提案すべきだ(潰さなきゃならないい技術リスクがあるってことだからね)。まあ、そうはいっても大抵はビジネスの視点から優先順位は決まっていく。そして決めた優先順位に従って、計画を現実のものにすべく、顧客は開発チームと一丸になって仕事をこなしていくんだ。それから顧客には、やらなきゃいけない楽しくない仕事がひとつある。期日が迫ってきたり、手持ちの資金が心細くなってきたときには、何を作らないかを決めるのは顧客の仕事だ。改めて言うまでもないかもしれないが、これらすべてを円滑に進めたいと思うなら、なるべく顧客は開発チームの近くにいたほうがいい。さらに君のプロジェクト専任であれば理想的だ。当初、エクストリーム・プログラミングではこのプラクティスをオンサイト顧客と呼んでいた。スクラムではプロダクトオーナーという専任の役割を用意している。顧客が専任であるかどうかよりも重要なのは、エクストリーム・プログラミングやスクラムといったアジャイル手法でそうしたプラクティスが生まれるにいたった「思い」を理解することだ。すなわち「顧客をじかに開発へ巻き込めば巻き込むほど、プロダクトはよくなっていく」。ここからアジャイル手法は生まれたんだ。だから、お客さんにはできるだけプロジェクトに積極的にかかわってもらおう。顧客という役割がどれだけ重要なのかをきちんと納得してもらって、プロジェクトの成功のために必要な決断を下せるだけの権限を委譲しておいてもらおう。お客さんに自ら進んで決断してもらうようにするんだ。","アジャイルサムライ_1"
"開発チーム","アジャイルサムライ_2"
"アジャイルな開発チームは職能横断的なメンバーで構成されており、顧客の望むフィーチャーをリリース可能なソフトウェアにするために集められる。アナリスト。プログラマ。テスター。データベース管理者。他にもユーザーストーリーをちゃんと動くソフトウェアとして実現するために必要なメンバーを全てそろえる。他にもデータベース管理者、システム管理者、テクニカルライター、トレーナー、業務改善担当、インフラ管理者、ネットワーク管理者、などなど。こうした役割もすべて開発チームに含まれるし、他のチームメンバーと同じように扱われる。","アジャイルサムライ_2"
"スクラムマスター","アジャイルサムライ_3"
"スクラムマスターは言ってみればアジャイルコーチとかっこいいプロジェクトマネージャを合わせたような感じだ。新しいチームを軌道に乗せるときには、アジャイルコーチがいると非常に助かる。アジャイルコーチは、アジャイル開発の原則や考え方をチームに説明し、受け入れていくことを後押しする。最後までやり遂げられるチームにするのがアジャイルコーチの仕事だ。そのために、チームが惑い習慣へ逆戻りしないよう注意を払う。コーチングについてはAgile Coachingという良書があるので参考にしてほしい。","アジャイルサムライ_3"
"プロダクトバックログ","アジャイルサムライ_4"
"マスターストーリーリスト","アジャイルサムライ_4"
"アジャイル開発では、プロジェク卜でこなすべきToDoリストを「マスターストーリーリスト(プロダクトバックログ)」と呼ぶ。リストの項目には、顧客がソフトウェアで実別したいと思っているありとあらゆるフィーチャーを載せておく。マスターストーリーリストは、フィーチャー(ユーザーストーリーとして表現する）の一覧だ。リストには顧客がソフトウェアで実現したいものを載せていく。載せた項目は、顧客が優先順位をつけて、開発チームが見積もる。その結果が計画の土台となる。良いマスターストーリーリストの長さは、１か月から６か月程度の期間でこなせる仕事の範囲に収まっている。あまりたくさんのストーリーをリストに載せても仕方がない。なぜなら、6ヶ月後に状況がどうなっているかなんでわからないからだ。状況が変わっていたら、半年も前に追加したストリーなんて、もうたぶん要らなくなってるんじゃないだろうか。だったら、今から半年先のことに気を揉んだって仕方ないと思わないかい？そうはいっても、マスターストーリーリストに載っているストーリーをすべて実装し尽くしてしまったらどうするんだと思うかもしれない。確かにそういうケースもなくはないが、滅多やたらとお目にかかれるものじゃない。いつだって与えられた期間や資金よりもやるべきことは多いものだ。","アジャイルサムライ_4"
"スプリント計画","アジャイルサムライ_5"
"ストーリ一計画ミーティング","アジャイルサムライ_5"
"ストーリ一計画ミーティングは、ジャストインタイム分析の結果を確認するミーティングだ。ストーリー計画ミーティングでは、これから始まるイテレーションで取り組むストーリーの準備が整っていることを全員で確かめる。顧客と一緒に受入テスト条件をレビューしたり、開発チームが見積りの数値を確認したりする。ストーリーの実装を始めるにあたって、必要な調査に漏れがないことを確認するのもこのタイミングだ。場合によっては、想定していたよりもストーリーが大きいことに気づくこともあるだろうが、それはそれで構わない。1回のイテレーションに収まるようにストーリーを分割して計画を更新し、前へ進んでいけばいい。逆の場合も作戦は同じだ(思っていたよりも小さいスーリーがあったら、イテレーションに収まるだけ他の小さなストーリーを「おかわり」して計画を更新し、前に進んでいけばいい）。","アジャイルサムライ_5"
"デイリースクラム","アジャイルサムライ_6"
"デイリースタンドアップ","アジャイルサムライ_6"
"デイリースタンドアップは、重要な情報をチーム内ですばやく共有することを目的にした集まりだ。あらゆるミーティングを無くすための究極のミーティングがデイリースタンドアップだ。デイリースタンドアップはここまでに本章で紹介してきたミーテイングと違い、会議体として正式に「開催」しない。チームメンバーが毎日、自主的に集まって話し合う。１回のミーティングにかける時間は5分から長くても10分程度にして、立ったままでやる(簡潔に伝えることを常に意識するためだ)。この場で報告する内容は、基本的には自分の作業の最新状況だ。チームメンバーに知っておいてもらいたいことがあれば、それもこの場で共有する。さて、大抵のアジャイル手法の解説書に載っているデイリースタンドアップのやり方はこうだ。全員で輸になって立ち、チームメンバーひとりひとりが、他のチームメンバー全員に対して次の3つを伝える。・昨日やったこと・今日やること・チームの開発速度を下げてしまうことがあれば何でもなかなかいいんじゃないか。でもこれだと、新たなひらめきとかチームの振る舞いを変えるにはちょっと物足りない。たとえば、デイリースタンドアップでの報告の仕方をこんな感じにしてみたらどうだろう？・昨日、世界をどう変えたのか・今日は何をぶちかますつもりか・不運にも自分の行く手を限んでしまったばかりに、あえなく吹き飛ばされるさだめとなった難問がどんな末路をたどるのかデイリースタンドアップでの報告の仕方をこんな風にしてみたら、場の雰囲気も一変するんじゃないだろうか。せっかくみんなの前に立って話すんだから、淡々と最新状況を報告するだけじゃもったいない。自分がこれからやろうと思っていることを天地神明に誓って宣言してみたらどうだろう？森羅万象を前に宣言したとなれば、取れる行動は２つに１つだ。自ら「やるぞ」と宣言したことをやり遂げるか、そうじゃないか。どっちに転ぶかはまったくもって君次第だ。つまり私からのアドバイスはこうだ。毎日、チームのみんなに「今日、私はこれをやります」とコミットメントを表明するんだ。これを続けていけば、自分でもびっくりするぐらい実際に仕事をやり遂げられるようになっていくはずだ。","アジャイルサムライ_6"
"スプリントレビュー","アジャイルサムライ_7"
"ショーケース","アジャイルサムライ_7"
"ショーケース（スプリントレビュー）はチームが成し遂げた成果をお披露目して、お客さんから本物のフィードパックを得る絶好の機会だ。ショーケースでは今回のイテレーションで実装したストーリーをデモする。そのときに見せるのは、テストサーパにデプロイした本物のコードだ。上手に描けた図を見せるのでもなければ、うまくいくであろう目論見を伝えるのでもない。ここで見せるのは、ちゃんと動くように開発チームが奮闘した結果であり、必要とあらば今ここで本番環境にリリースできるコードだ。なぜなら作業は「完了」しているからだ。","アジャイルサムライ_7"
"プロジェクトふりかえり","アジャイルサムライ_8"
"ミニふりかえり","アジャイルサムライ_8"
"ミニふりかえりは、10分とか15分ぐらいの時間で開催する、短くて集中したミーティングだ。チーム全員が定期的に集まって、すごくうまくいったことやもっとうまくやるためにどうすればいいかを話し合うんだ。有意義なふりかえりをするために一番大切なルールは、みんなが安心できる雰囲気を作ることだ。もしそこに問題があるようなら「ふりかえり最重要条項」の出番だ。これができなきゃ始まらないってことを肝に銘じておこう。どんな問題が出てきたとしても、私たちは次のことを納得し、それを心から信じます。チームメンバーそれぞれは、その当時わかっていたこと、備えていた自分自身のスキルと能力、手に入れることのできたリソース、そして現場の状況に応じて、自分の力が及ぶ限りの全力を尽くしたのです。つまり、ふりかえりは魔女狩りじゃない。","アジャイルサムライ_8"
"イテレーション計画","アジャイルサムライ_9"
"プロダクトバックログリファインメント","アジャイルサムライ_9"
"イテレーション計画ミーティングでは、開発チームと顧客とが一緒になって、次回のイテレーションの作業を計画する。チームのベロシティを確認し、次にとりかかるストーリーを整理する。そして、次回のイテレーションでチーム全体としてコミットメントする作業量を見極める。イテレーション計画ミーティングは、プロジェクトの健康状態を確認するのにふさわしいタイミングでもある。プロジェクトの現状を気性速報みたいに表現するのも悪くないだろう。何か必要なものがあるとか、特に話し合っておきたい厄介な問題があるんだったら、それも併せて伝えよう。プロジェクトがいつ頃おわりそうなのかを把握したいなら、バーンダウンチャートを使うのがいい。バーンダウンチャートは残酷なまでに正直な、冷酷非情のツールだ。プロジェクト完了への現実的な見通しをありのままに淡々と開発チームと顧客に報告してくれる。","アジャイルサムライ_9"
"アジャイルであることとは？","アジャイルプラクティス_1"
"状況の変化にすばやく適応できる能力のことだ。サーファーは、予想よりも早く波が砕けても適応できなければならない。開発者なら、想定外の早さで設計が破綻しでも適応できなければならない。","アジャイルプラクティス_1"
"批判したい","アジャイルプラクティス_10"
"嫌いな人がいる","アジャイルプラクティス_10"
"納得できない","アジャイルプラクティス_10"
"批判するならアイデアになさい、人ではなく誰のアイデアが優れているかを競うのではなく、解決策を導き出せたことに誇りを持ちなさい。","アジャイルプラクティス_10"
"言いたいことが言えない","アジャイルプラクティス_11"
"ポイズン","アジャイルプラクティス_11"
"勇気が出ない","アジャイルプラクティス_11"
"正しいことをしましょう。誠実に、勇気を出して真実を伝えなさい。時にはそれが難しいこともあるでしょう。だからこそ勇気が必要なのです。","アジャイルプラクティス_11"
"レガシー","アジャイルプラクティス_12"
"変化したくない","アジャイルプラクティス_12"
"へラクレイトス日く、「変化せぬものは変化のみ」。これは有史以来の真実だが、とりわけ現代にはこの言葉が似つかわしい。この業界は絶え間なく変化し、活気に溢れている。「自分はコンピュータサイエンスや関連する専門分野の専攻だったから、もう学ぶべきことなどない」などと思っているようなら、それは勘違いにもほどがあるというものだ。","アジャイルプラクティス_12"
"キャリアパス","アジャイルプラクティス_13"
"今後","アジャイルプラクティス_13"
"技術の変化に付いていきましょうあらゆる分野のエキスパートになる必要はありませんが、業界がどこへ向かっているのかは把握しておきなさい。それを踏まえて自分のキャリアとプロジェクトの計画を立てるのです。","アジャイルプラクティス_13"
"独り占めしたい","アジャイルプラクティス_14"
"教えたくない","アジャイルプラクティス_14"
"属人的が良い","アジャイルプラクティス_14"
"あなた自身とチームのレベルを引き上げましょうブラウンバッグミーティングを活用してメンバーの知識とスキルを高め、チームの結束を固めるのです。プロジェクトにプラスとなる技術や手法にチームの関心を向けさせるのです。","アジャイルプラクティス_14"
"習慣","アジャイルプラクティス_15"
"慣習","アジャイルプラクティス_15"
"踏襲","アジャイルプラクティス_15"
"新しきを学び、古きを捨てましょう。新しい技術を学ぶときには、足を引っ張りかねない古い習慣を捨てなさい。自動車は馬車とは別次元のものであって、単に馬のついていない馬車というわけではないのです。","アジャイルプラクティス_15"
"質問","アジャイルプラクティス_16"
"疑問","アジャイルプラクティス_16"
"なぜ？","アジャイルプラクティス_16"
"なぜ? と問い続けなさい。言われたことを額面どおりに受け取ってはいけません。問題の担本を理解するまで質問し続けるのです。「Fifth Discipline FieldBook」では、こうした根本原因分析の一例が紹介されている。あるコンサルタントが製造工場の管理者に聞き取りをした時の話だ。床に油がこぼれているのを目にした管理者は、最初の反応として、それを消掃するよう指示した。一方、コンサルタントはこう尋ねた。「なぜ床に油がこぼれているのでしょうか? 」 質問の主旨を捉えかねた管理者は、消掃担当者の怠慢を叱責した。コンサルタントは再び尋ねた。「なぜ床に油がこぼれているのでしょうか? J」部門を横断して大勢の従業員に対して果敢に「なぜ? J を繰り返し聞い続けた結果、コンサルタントはついに問題の真相を突き止めた。購買条件の記述が不十分だったせいで、不備のあるガスケットが大量に購入されていたのだ。この結末は、管理者をはじめすべての関係者にかなりの街曜を与えた。思いもよらないことだったのだ。おかげで深刻な問題が白日の下にさらされた。この問題が放置されていたら事態はさらに悪化し、損害も鉱大していただろう。今回、コンサルタントがしたことは「なぜ? J と尋ねること、それだけだった。","アジャイルプラクティス_16"
"タイムボックス","アジャイルプラクティス_17"
"リズム","アジャイルプラクティス_17"
"アジャイル開発者は、さまざまな情報源からフィードバックを得る。ユーザ、チームメンパ一、それからテストされているコード。こうしたフィードバックを活用することで、プロジェクトの進む方向を調整できる。これら具体的なフィードバックに加えて、流れていった時間そのものからも、きわめて重要な形のフィードバックが得られる。アジャイルの手法の多くは、タイムボックス化をベースとしている。『タイムボックス化』とは、作業に対して短期間の、厳しい締め切りを設定することだ。締め切りの延長はなしだ。どこで作業の帳尻を合わせるかは自分で選ぶことができる。だが、締め切りは固定だ。すべての作業を完了させるまでにタイムボックスがいくつ必要なのか、正確な数はわからない場合がほとんどだろう。それでも、個々のタイムボックスの期聞は短く限定しておく。タイムボックスごとに、はっきりとした目標を設定して成果をあげていくんだ。例えば、よくあるイテレーションの長さは数週間だ。最終日を迎えたらイテレーションは終了する。イテレーションの長さは固定だが、あるイテレーションでどの機能に取り組むかは柔軟に決めていい。別の言い方をすれば、日付は動かせないが、機能は動かせるということだ。同じやり方で設計ミーティングもタイムボックス化できる。つまり、所定の時聞が来たらミーティングは終了し、その時点で設計をどうするかが決まっているということだ。厳しい締め切りが設定されれば、とにかく選択せざるを得ない。哲学的な議論や、いつまでたっても進捗率80 パーセントの機能にかまけて時聞を浪費するわけにはいかなくなる。タイムボックスが物事を前進させるんだ。サメは泳ぎ続けなければ死んでしまう。その意味では、ソフトウェアプロジェクトもサメみたいなものだ。その都度その都度での最良の情報を活用して、前進し続けなければならない。","アジャイルプラクティス_17"
"決断","アジャイルプラクティス_18"
"顧客に決断してもらうのです。開発者、マネージャ、業務アナリストは、ビジネスに重大な影響を及ぼす決定を下すべきではありません。事の詳細を、ビジネスの担い手に理解してもらえる言葉で伝えたうえで、顧客に決断してもらうのです。","アジャイルプラクティス_18"
"設計書","アジャイルプラクティス_19"
"ドキュメント","アジャイルプラクティス_19"
"厳密","アジャイルプラクティス_19"
"優れた段計は地図です。少しずつ発展させるのです。設計は、正しい方向を示す道しるべではありますが、土地そのものではありません。具体的な道順を事細かに指定すべきものでもありません。設計(または設計者) に囚われてはいけません。","アジャイルプラクティス_19"
"アジャイルの本質とは？","アジャイルプラクティス_2"
"どこで生まれた","アジャイルプラクティス_2"
"アジャイルマニフェスト","アジャイルプラクティス_2"
"2001 年2 月、17 人の同志がユタ州のスノーバードに集まった。会合の目的は、当時軽量プロセス(Lightweight Processes)と総称されていた新たなソフトウェア開発の動向について話し合うことだった。そのころアンディたちは、中間成果物の多さの割には最終成果物が少ない重厚長大な開発方法論のせいで、数々のプロジェクトが失敗するのを目の当たりにしていた。もっと優れた関発方法論があるはずだ。重要度の高い事柄に注力し、重要度の低い事柄( 貴重な時間を浪費するばかりで、大して成果の出ない事柄) には労力を割かないようにする方法論が。17 人はそれにアジャイルという名前を与え、アジャイルマニフェストを発表した。アジャイルマニフェストでは、ソフトウェア開発で重視するものを改めて考え直した。重視するのは、人、人と人との交流と協調、適応力、動作するソフトウェアだ。","アジャイルプラクティス_2"
"リリース可能","アジャイルプラクティス_20"
"いついかなる時でもプロジェクトをリリース可能な状態にしておくのです。プロジェクトを常に、コンパイルが通り、実行可能で、テストも通っていて、突然のデプロイ要請にも迅速に対応できる状態にしておきなさい。","アジャイルプラクティス_20"
"コードの統合","アジャイルプラクティス_21"
"はやめに統合すれば、サブシステム問の相互作用と連携がどうなっているのかを確認できる。データのやり取りや共有の方法も実際に調べられる。統合にあたって解決すべき課題を早く把握できれば、早い段階で対処できるし、修正の手間も比較的少なくて済む。これは、3 人の開発者で5 万行のコードベースを手がける場合であっても、5 千人で3 千万行を手がける場合でも同じだ。ところが統合を先延ばしにしていると、こうした統合にまつわる問題は手に負えないものになりかねない。対処しようにもコードの修正が広範囲にわたって必要になってしまい、納期の遅れや混乱を招いてしまうのだ。","アジャイルプラクティス_21"
"デモ","アジャイルプラクティス_22"
"フィードバック","アジャイルプラクティス_22"
"頻繁にフィードバックを得よう。イテレーションの周期が四半期や1 年では長すぎる。1 回のイテレーションの長さは、1 週間か2 週間にすること。アプリケーションについて顧客からフィードバックを得ることに積極的になろう。たとえまだ実装が不十分な機能があったとしても、見せることで何らかのフィードバックを得られるからだ。","アジャイルプラクティス_22"
"開発の単位","アジャイルプラクティス_23"
"インクリメンタル","アジャイルプラクティス_23"
"インクリメンタルに開発しなさい。最小限だけれども、きちんと使える機能を備えた製品をリリースしなさい。各インクリメントの開発では、1～4 週間周期のイテレーションをまわすのです。","アジャイルプラクティス_23"
"ユニットテスト","アジャイルプラクティス_24"
"■ユニットテストは索早いフィードバックを提供する。　コードは何度も繰り返し実行される。コードの変更や書き直しを行っても、元の振る舞いを壊していないことをテストケースが保証する。もし何か問題があれば、すぐに確認して修正できる。■ユニットテストはコードを堅牢にする　テストは、正常ケース、異常ケース、例外ケースの実行を通してコードの振る舞いを徹底して考えるのに役立つ。■ユニットテストは役に立つ設計ツールである　ユニットテストは、実用的でシンプルな設計の実現にも役立つ。■ユニットテストは開発者の自信を強める　コードをテストすることで、さまざまな条件での振る舞いを試すことになる。おかげで、厳しいスケジュールでプレッシャーのきつい、新しい作業に直而したときであっても、自信を持って取り組める。■ユニットテストは問題解決時には探査装置となる　ユニットテストは、いわばプリント基板のテストに使うオシロスコープのプロープと同じような役割を果たす。問題が発生したらすぐに、コードの内部動作のパルスを測定できる。これは問題を突き止めて解決するための自然なやり方だ。■ユニットテストは信頼のおけるドキュメントである　新しいAPI を知るにあたっては、そのAPI のユニットテストを正確で信頼のおけるドキュメントとして活用できる。■ユニットテストは学習教材である　新しいAPI を使い始めるときには、そのAPI のテストを作成することから始めると、学習効果を高められる。こうしたラーニングテスト( 学習テスト) は、API の動作を理解するためだけでなく、後になって互換性のない変更が加えられたときに、それをすばやく検出するのにも役立つ。","アジャイルプラクティス_24"
"顧客の声","アジャイルプラクティス_25"
"ユーザーの声","アジャイルプラクティス_25"
"ユーザの声","アジャイルプラクティス_25"
"あらゆる不満に真実が潜んでいるのです。その真実を見つけ出し、本当の問題に対処なさい。","アジャイルプラクティス_25"
"ブタ","アジャイルプラクティス_26"
"ニワトリ","アジャイルプラクティス_26"
"Scrum では、チームメンバーと非チームメンバーの役割を、それぞれブタとニワトリと名付けている。チームメンバーがブタ( これはいい名前I) で、非チームメンバー( マネージャ、サポート、品質保証担当など) がニワトリだ。ブタとニワトリという表現は、一緒にレストランを開こうとしている家畜の寓話にちなんでいる。レストランで朝食にベーコンエッグを出そうとすれば、ニワトリも確かに手を貸すが、プタにはコミットメントが求められる。ニワトリは卵を産むだけでいいが、プタの方は命がけだ。Scrum ではr「ブタ」だけがスタンドアップミーティングに参加できる。","アジャイルプラクティス_26"
"まともな設計","アジャイルプラクティス_27"
"アーキテクト","アジャイルプラクティス_27"
"まともな設計は積極的にコードを書くプログラマから生まれます。本物の洞察は、実際にコードを書くことからもたらされます。コーディングしないアーキテクトと一緒に仕事をしないように。システムの実態を知らずにまともに設計なんでできません。","アジャイルプラクティス_27"
"教えたくない","アジャイルプラクティス_28"
"分かち合いたくない","アジャイルプラクティス_28"
"メンターになりましょう。自分の知識をほかの人たちと分かち合うのは楽しいことです。与えることで得られるものがあります。ほかの人たちを刺激して、もっと良い結果を出せるようにしなさい。チーム全体の能力を高めるように努めなさい。","アジャイルプラクティス_28"
"教え方","アジャイルプラクティス_29"
"答えを教える","アジャイルプラクティス_29"
"学び","アジャイルプラクティス_29"
"みんなに問題を解決する機会を与えなさい。解決策を与えるのではなく、正しい方向に導くのです。その過程で誰もが何かを学ぶことができます。","アジャイルプラクティス_29"
"アジャイルなアプローチとは？","アジャイルプラクティス_3"
"アジャイルなアプローチとは、適応力と協調を重んじる人々が、一丸となって目に見える具体的な目標( きちんと動作するソフトウェア)に向かっていくことである。これがアジャイルの本質だ。開発がアジャイルになると、開発現場で重点を置くものが、計画を絶対視する(plan-based) 方式から、より自然で継続的なスタイルへと変化していく。アジャイル開発では、チームのメンバー( およびチームと共に作業するメンバー)全員が、プロジェクトで明確な結果を出すことを目指すプロフェッショナルであることを前提としている。","アジャイルプラクティス_3"
"透明性","アジャイルプラクティス_30"
"情報の共有","アジャイルプラクティス_30"
"あらゆることをみんなに知らせましょう。自分の状況、アイデア、関心のある事柄などを公開しなさい。ほかの人たちから仕事の状況を尋ねられるまで黙っていてはいけません。","アジャイルプラクティス_30"
"アジャイルは全員がプロフェッショナルである必要があるのか？","アジャイルプラクティス_4"
"アジャイル開発において、必ずしも全員が経験豊富なプロフェッショナルではないかもしれない。しかし、プロフェッショナルとしての意識を持ち、自らの持てる力を最大限に発揮したいという意欲に満ちている。","アジャイルプラクティス_4"
"アジャイルに向いてないチーム","アジャイルプラクティス_5"
"ずる休み、手抜き、あからさまなサボりに悩まされているチームには、アジャイル開発は合わないと思う。そんなチームに必要なのは、もっと鈍重で時間のかかる、生産性の低い開発プロセスだ。あなたが胸を張って「うちのチームはそんなんじゃない」と言えるなら、アジャイルなスタイルで開発を始められる。アジャイルな開発スタイルとは、つまりこういうことだ。プロジェクトの最後にまとめてテストしない。統合を月末まで延期しない。コードを書き始めたからといって要求やフィードバックの反映を止めない。","アジャイルプラクティス_5"
"アジャイルなプロジェクト","アジャイルプラクティス_6"
"アジャイルな開発スタイル","アジャイルプラクティス_6"
"継続的な開発","アジャイルプラクティス_6"
"アジャイルなプロジェクトの開発は、これまでとは違って、プロジェクトのライフサイクル全体を通じて、あらゆる作業を継続的に実行するんだ。そもそもソフトウェアというものは、ユーザが使い続ける限り、本当の意味で「完成」することはない。だから、ソフトウェアの開発はもはやプロジェクトですらないといってもいい。ソフトウェア開発は継続的なものなんだ。フィードバックも継続的だ。問題を発見するまでに何カ月も待つ必要はない。まだ傷が浅いうちに見つけ出し、すばやく修正する。見つけたその時、見つけたその場で、だ。これがアジャイルな開発スタイルだ。","アジャイルプラクティス_6"
"どこから始めるか","アジャイルプラクティス_7"
"どんなときも、最初に最大の難問へ取り組みなさい。簡単なものは後回しでよいのです。","アジャイルプラクティス_7"
"非難したい人がいる","アジャイルプラクティス_8"
"非難したいバグがある","アジャイルプラクティス_8"
"俺のせいじゃない","アジャイルプラクティス_8"
"非難してもバグは直りません。誰かの後る指をさすのではなく、自分のできる解決策に注力しなさい。大事なことは、意味のある成果をあげることです。","アジャイルプラクティス_8"
"時間がない","アジャイルプラクティス_9"
"コードが汚い","アジャイルプラクティス_9"
"応急処置の誘惑に打ち勝ちなさい。いつでもきれいな状態のコードを見せられるように全力を尽くしなさい。","アジャイルプラクティス_9"
"スクラムとは何か？","コアスクラム_1"
"スクラムはアジャイルな製品開発に導くためのフレームワークです。活発で楽しく、より協調しながらビジネス目標を実現するための基礎と道筋を示すものです。まだスクラムを使っていないのなら覚えていないかもしれませんが、スクラムを使うと再び楽しみながら仕事することができます！スクラムはソフトウェア開発の心得が元ですが、多くの他の業界でもこのフレームワークは採用されています。 実際、教育やマーケティング、運用業務などにもスクラムは採用され親しまれています。","コアスクラム_1"
"スクラムの由来は？","コアスクラム_2"
"スクラムのコンセプトは1986年に「より新しい商品開発ゲーム」（ハーバード・ビジネス・レビュー、1986年1月/ 2月）で、竹内 弘高と野中 郁次郎によって初めて世界に発信されました。彼らはそのアプローチを「柔軟で総合的な製品開発戦略」と定義し、迅速で柔軟な製品開発をもたらすと提唱しました。彼らは、ラグビーの試合のように1つの機能横断的なチームが「ゴールライン」への道のりの中で「ボール」を前後にパスすることから、総合的な「ラグビー」アプローチと呼びました。これは、厳密に線形的な方法で進歩させるアプローチとは明らかに対照的でした。","コアスクラム_2"
"アジャイルマニュフェストとは何ですか？","コアスクラム_3"
"2001年、アジャイルの共通の価値を見出そうとする17人がユタのワサッチ山脈に集まりました。彼らはアジャイルソフトウェア開発宣言の発展につながる4つの共通の価値に到達しました。","コアスクラム_3"
"コアスクラムとアジャイルソフトウェア開発宣言からの共通の価値は何ですか？","コアスクラム_4"
"スクラムはアジャイルのフレームワークであり、アジャイル・マニフェストの価値と一致しています。以下4つです。・「プロセスやツールよりも個人との対話を」・「包括的なドキュメントよりも動くソフトウェアを」・「契約交渉よりも顧客との協調（協業）を」・「計画に従うことよりも変化への対応を」","コアスクラム_4"
"「プロセスやツールよりも個人との対話を」とは具体的にどのような意味ですか？","コアスクラム_5"
"スクラムは、ビジネスに価値をもたらすためのチームベースのアプローチです。チームメンバーは協力しながらビジネス目標を共有します。スクラムフレームワークは、チームメンバー間の効果的なやりとりを促進し、チームがビジネス価値をもたらすようにします。チームがビジネス目標を達成すること、それは・生産性を定量化すること・作業すること・途中で何が起きているのかを特定すること・その範囲内のすべての困難を解決する責任を負うこと・ 組織外の懸念を解決するために組織の他の部分と協力することスクラムのチームがこれらの責任に焦点を当てることがとても重要です。","コアスクラム_5"
"「包括的なドキュメントよりも動くソフトウェアを」とは具体的にどのような意味ですか？","コアスクラム_6"
"スクラムでは、すべてのスプリントの主な結果として、インクリメントが必要です。 どのような活動がスプリント中に行われても、焦点はプロダクトインクリメントの作成にあります。スクラムチームの目標は、スプリントごとにインクリメントを作成することです。そのインクリメントにはまだビジネスが求める十分な機能は含まれていないかもしれませんが、チームは現在の機能が出荷可能な品質であることを保証する必要があります。","コアスクラム_6"
"「契約交渉よりも顧客との協調（協業）を」とは具体的にどのような意味ですか？","コアスクラム_7"
"スクラムは、コラボレーション（共同作業）の促進を目的としたフレームワークです。チームメンバーはお互いに協力し、ソフトウェアやその他の成果物を作成しながらビジネスに提供する最良の方法を探求します。チーム、特にプロダクトオーナーは、利害関係者（ステークホルダ）と協力しながら製品ビジョンを検査し、（ビジョンと製品を）適合させることで、製品の価値が高まるようにします。","コアスクラム_7"
"「計画に従うことよりも変化への対応を」とは具体的にどのような意味ですか？","コアスクラム_8"
"スクラムチームは頻繁に計画を立てます。スクラムの初心者は現在のスプリントを計画し、さらに多くのチームにまたいだリリース計画やプロダクトロードマップなどの長期計画を作成します。これらの計画は、チームとビジネスの意思決定に役立ちます。しかし、チームの目標は、計画をやみくもに順守することではありません。目標は価値の創造と、変化を受け入れることにあります。本質は思考のプロセスとアイデアであり、計画よりも重要です。早期に作成された計画は、将来利用できる情報よりも少ない情報に基づいているため、当然これは最善の計画ではない可能性があります。新しい情報が見つかると、チームはプロダクトバックログを更新します。 つまり、製品の方向性は変わる可能性があるということです。継続的に計画し改善することは、経験に新しい知識を取り入れ、チームの成功の可能性を上げます。スクラムチームは絶えず変化に対応し、可能な限り最良の結果を残します。スクラムはフィードバックループのフレームワークと表すこともでき、チームが絶えず検査し適応することで、製品価値を最大化します。","コアスクラム_8"
"プロダクトオーナー","スクラム_1"
"3つの役割","スクラム_1"
"プロダクトオーナーは、このプロジェクトで何をつくっていくかを考えていく人だ。もちろん､実際につくったものをなるべく良いものにしていかないといけない。実際の利用者から高い評価をもらえたり、自分たちのビジネスに少しでも貢献できたりするように必要なことをやっていく｡ただし､プロジェクトの予算や期間といった制約の中でそれをやらなきゃいけない役割だ。","スクラム_1"
"スプリントレトロスペクティブ","スクラム_10"
"５つの会議","スクラム_10"
"スプリントの最後には､スブリントレトロスペクティブを行います。日本では｢ふりかえり」と呼ばれることもあります。スプリントレトロスペクティブでは、直近のスプリントでのプロダクトの開発に関わる活動において問題がなかったか、もっと成果を出すためにできることがないか検査を行い､次回のスブリント以降のアクションプランを決めます。そのうえで、より効果のありそうな項目から取り組んで、より成果を出せるように自分たちの仕事のやり方を変えていきます。","スクラム_10"
"プロダクトバックログリファインメント","スクラム_11"
"５つの会議","スクラム_11"
"プロダクトオーナーによるプロダクトバックログアイテムの詳細化と優先順位の調整を行います。","スクラム_11"
"透明性","スクラム_12"
"３つの柱","スクラム_12"
"経験的プロセスで重要なのは、結果責任を持つ者に対して見える化されていることである。透明性とは、こうしたことが標準化され、見ている人が共通理解を持つことである。","スクラム_12"
"検査","スクラム_13"
"３つの柱","スクラム_13"
"スクラムのユーザーは、スクラムの成果物や進捗を頻繁に検査し、変化を検知する。ただし、検査を頻繁にやりすぎて作業の妨げになってはいけない。熟練の検査人が念入りに行えば、検査は最大の効果をもたらす。","スクラム_13"
"適応","スクラム_14"
"３つの柱","スクラム_14"
"プロセスの不備が許容値を超え、成果となるプロダクトを受け入れられないと検査人が判断した場合は、プロセスやその構成要素を調整する必要がある。調整はできるだけ早く行い、これ以上の逸脱を防がなければいけない。","スクラム_14"
"Focus","スクラム_15"
"5つの価値","スクラム_15"
"集中すること","スクラム_15"
"一度に集中する事柄を少なくし、共に働き、生産性を高めます。価値ある製品を早く届けます。","スクラム_15"
"Courage","スクラム_16"
"5つの価値","スクラム_16"
"勇気を持つこと","スクラム_16"
"私たちは助け合い、余裕もってチームとして働きます。これは私たちに大きなチャレンジをする勇気を与えます。","スクラム_16"
"Openness","スクラム_17"
"5つの価値","スクラム_17"
"解放的であること","スクラム_17"
"共に働くことで、自分やチームのやり方に対する懸念事項があれば発信できます。","スクラム_17"
"Commitment","スクラム_18"
"5つの価値","スクラム_18"
"コミットメント","スクラム_18"
"私たちは自律的に行動しているため、更なる成功にコミットします。","スクラム_18"
"Respect","スクラム_19"
"5つの価値","スクラム_19"
"尊敬","スクラム_19"
"協力して成功と失敗を分かち合うこと、またお互いが尊重し合うことによって、お互いに尊敬し価値を認め合えるようになります。","スクラム_19"
"スクラムマスター","スクラム_2"
"3つの役割","スクラム_2"
"スクラムマスターは、プロジェクトをScrumで進めていけるようにする人だ。Scrumで決められていることをみんなにただ守ってもらうだけでなく、みんながうまく作業を進められるようにしていかないといけない。もし、何かうまくいかないことがあって仕事が円滑に進んでないのなら、それを取り除いていく役割だ。","スクラム_2"
"開発チーム","スクラム_3"
"3つの役割","スクラム_3"
"開発チームは、プロダクトオーナーがこのプロジェクトで実現したいと思っていることを、実際につくっていく人たちのことだ。どうつくっていくかはこの人たちに任されている。コードを闇くだけでなく、要求を聞き出したり、見積もったり、設計、画面デザイン、テスト、さらにはつくったものをデモするとか、必要な作業をすべてこなしていく役割だ。","スクラム_3"
"プロダクトバックログ","スクラム_4"
"3つの成果物","スクラム_4"
"プロダクトへの要求の一覧。プロダクトオーナーがつくる順番に並べ替える。各項目は開発チームによって見積りが行われる。","スクラム_4"
"スプリントバックログ","スクラム_5"
"3つの成果物","スクラム_5"
"今回のスプリント期間中に行うタスクのリスト。","スクラム_5"
"プロダクトインクリメント","スクラム_6"
"3つの成果物","スクラム_6"
"リリース判断可能なプロダクト。SCRUMではスプリント単位でリリース判断可能なプロダクトをつくることが求められます。そのため、プロダクトオーナーと開発チームが「リリース判断可能」の指す内容について共通の基準を持つ必要があります。","スクラム_6"
"スプリント計画","スクラム_7"
"５つの会議","スクラム_7"
"プロダクトオーナー、開発チーム、スクラムマスターが参加し、そのスプリントで、どのプロダクトバックログの項目を開発するのかを検討し、内容を確認します。","スクラム_7"
"デイリースクラム","スクラム_8"
"５つの会議","スクラム_8"
"デイリースクラムは開発チームの人数に関係なく、１５分間のタイムボックスで行われ、延長できません。デイリースクラムでは開発チームの各メンバーは以下の３点について、開発チーム全体に向けて簡潔に報告します。「前回のデイリースクラムからやったこと」、「次回のデイリースクラムまでにやること」、「困っていること」。これによってスプリントがゴールに向かって進んでいるか、作業の進捗はどうなっているか、メンバー間の協力が必要なことがないかなどを確認します。","スクラム_8"
"スプリントレビュー","スクラム_9"
"５つの会議","スクラム_9"
"スプリントで開発チームはリリース判断が可能なプロダクトをつくりますが、スプリントの最後にプロダクトオーナーがプロダクトを確認する機会を設定します。これをスプリントレビューと呼びます。","スクラム_9"
"スクラムチーム","スクラムガイド_1"
"スクラムチームは、プロダクトオーナー・開発チーム・スクラムマスターで構成される。スクラムチームは自己組織化されており、機能横断的である。自己組織化チームは、作業を成し遂げるための最善の策を、チーム外からの指示ではなく、自分たちで選択する。機能横断的チームは、チーム以外に頼らずに作業を成し遂げる能力を持っている。スクラムにおけるチームのモデルは、柔軟性・創造性・生産性を最適化するように設計されている。スクラムチームは、プロダクトを反復的・漸進的に届ける。これは、フィードバックの機会を最大化するためである。「完成」したプロダクトを漸進的に届けることで、動作するプロダクトを常に利用可能な状態にする。","スクラムガイド_1"
"スプリントレトロスペクティブ","スクラムガイド_10"
"スプリントレトロスペクティブは、スクラムチームの検査と次のスプリントの改善計画を作成する機会である。スプリントレトロスペクティブは、スプリントレビューが終わって、次のスプリントプランニングが始まる前に行う。スプリントが1か月の場合、スプリントレトロスペクティブのタイムボックスは3時間である。スプリントの期間が短ければ、スプリントレトロスペクティブの時間も短くすることが多い。スクラムマスターは、このイベントが確実に開催されるようにする。また、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。スクラムマスターは、スクラムプロセスを説明するためにチームメンバーとしてイベントに参加する。スプリントレトロスペクティブには、以下の目的がある。 人・関係・プロセス・ツールの観点から今回のスプリントを検査する。 うまくいった項目や今後の改善が必要な項目を特定・整理する。 スクラムチームの作業の改善実施計画を作成する。スクラムマスターは、次のスプリントが効果的で楽しいものになるように、開発チームにスクラムプロセスフレームワークの範囲内で開発プロセスやプラクティスを改善してもらう。スクラムチームは、「完成」の定義を適切に調整して、プロダクトの品質を向上させる方法を計画する。スプリントレトロスペクティブが終わるまでに、スクラムチームは次のスプリントで実施する改善策を特定しなければいけない。これらの改善策の実施は、開発チーム自体の検査の適応になる。改善はいつでも実施可能だが、スプリントレトロスペクティブは検査と適応のための公式な機会である。","スクラムガイド_10"
"スクラムの成果物","スクラムガイド_11"
"・プロダクトバックログ・スプリントバックログ・インクリメント","スクラムガイド_11"
"プロダクトバックログ","スクラムガイド_12"
"プロダクトバックログは、プロダクトに必要なものがすべて並べられた一覧であり、プロダクトに対する変更要求の唯一の情報源である。プロダクトオーナーは、プロダクトバックログの内容・可用性・並び順に責任を持つ。プロダクトバックログは決して完成しない。開発の初期段階には、最初から明確でよく理解できた要求が並べられている。プロダクトバックログは、プロダクトや使用環境に合わせて進化する。プロダクトバックログは動的であり、適切で競争力のある有用なプロダクトに必要なものを求めて絶えず変化する。プロダクトが存在する限り、プロダクトバックログは不滅である。プロダクトバックログは、今後のリリースで実装するプロダクトのフィーチャ・機能・要求・要望・修正をすべて一覧にしている。プロダクトバックログアイテムには、詳細・並び順・見積りの属性がある。プロダクトが使用されて価値が増加し、市場からフィードバックを得られると、プロダクトバックログは巨大で包括的な一覧になる。要求の変更は止まらない。プロダクトバックログは生きた成果物である。ビジネス要求・市場の状態・技術の変化が、プロダクトバックログの変化につながる。複数のスクラムチームが同じプロダクトの作業をすることがよくある。そうした場合、プロダクトの作業は1つのプロダクトバックログに記述する。また、アイテムをグループにまとめる属性をプロダクトバックログに追加する。プロダクトバックログアイテムに詳細・見積り・並び順を追加することを、プロダクトバックログのリファインメントと呼ぶ。これはプロダクトオーナーと開発チームが協力して行う継続的なプロセスである。プロダクトバックログのリファインメントによって、アイテムのレビューと改訂が行われる。いつどのようにリファインメントをするかは、スクラムチームが決定する。リファインメントは、開発チームの作業の10%以下にすることが多い。ただし、プロダクトバックログアイテムはプロダクトオーナーの判断によって、いつでも更新できる。並び順が上のアイテムほど明確で詳細である。明確で詳細であれば、見積りも正確になる。並び順が下のアイテムほど不正確で詳細ではない。今後のスプリントで開発チームが従事するプロダクトバックログアイテムは、スプリントのタイムボックスで「完成」できるようにうまく細分化する。開発チームが1つのスプリントで「完成」でき","スクラムガイド_12"
"ゴールへの進捗管理","スクラムガイド_13"
"プロジェクトの進捗管理","スクラムガイド_13"
"いずれかの時点で、開発ゴールに対する残作業を合計する。プロダクトオーナーは、少なくともスプリントレビューにおいて、この残作業の合計を追跡する。プロダクトオーナーは、前回のスプリントレビューのときの残作業の合計と比較して、希望する時間までにゴールに到達できるかどうかを評価する。この情報は関係者全員に明らかにされる。進捗の見通しを立てるために、バーンダウンやバーンアップなどのさまざまなプラクティスが使用されている。これらは有用ではあるが、経験主義の重要性を置き換えるものではない。複雑な環境下では、何が起きるかわからない。すでに起きたものだけが、これから先の意思決定に使用できる。","スクラムガイド_13"
"スプリントの進捗管理","スクラムガイド_14"
"スプリントのいずれかの時点で、スプリントバックログの残作業を合計する。開発チームは、少なくともデイリースクラムにおいて、この残作業の合計を追跡し、スプリントゴールの達成に見通しを立てる。開発チームはスプリントで残作業を追跡し、自分たちの進捗を管理する。","スクラムガイド_14"
"インクリメント","スクラムガイド_15"
"インクリメントとは、これまでのインクリメントの価値と今回のスプリントで完成したプロダクトバックログアイテムを合わせたものである。スプリントの終わりには、新しいインクリメントが「完成」していなければいけない。つまり、インクリメントが動作する状態であり、スクラムチームの「完成」の定義に合っていることを意味する。プロダクトオーナーがリリースを決定する／しないにかかわらず、インクリメントは常に動作する状態にしておかなければいけない。","スクラムガイド_15"
"成果物の透明性","スクラムガイド_16"
"スクラムは透明性に依存している。成果物の状態を把握することで、価値の最適化やリスクの制御に関する決定を行う。透明性が確保されている限り、こうした決定には信頼できる根拠が存在する。成果物が不完全に透明化されていれば、こうした決定には不備があり、価値は低減し、リスクが高まる可能性がある。スクラムマスターは、プロダクトオーナー・開発チーム・その他の関係者と一緒になって、成果物が完全に透明化されているかを理解する。不完全な透明性に対処するには、いくつかのプラクティスが存在する。スクラムマスターは、そのなかから最適なプラクティスの選択してもらえるように支援する。スクラムマスターは、成果物の検査・パターンの察知・言説の傾聴・期待値と実際値の違いを把握することで、不完全な透明性を検知できる。スクラムマスターの仕事は、スクラムチームや組織と一緒になって、成果物の透明性を向上させることである。この仕事には、学習・説得・変化を伴うことが多い。透明性は一夜にしてならず。透明性とは長い道のりなのである。","スクラムガイド_16"
"プロダクトオーナーの役割","スクラムガイド_2"
" プロダクトバックログアイテムを明確に表現する。 ゴールとミッションを達成できるようにプロダクトバックログアイテムを並び替える。 開発チームが行う作業の価値を最適化する。 プロダクトバックログを全員に見える化・透明化・明確化し、スクラムチームが次に行う作業を示す。 必要とされるレベルでプロダクトバックログアイテムを開発チームに理解してもらう。上記の作業は、プロダクトオーナーが行う場合もあれば、開発チームが行う場合もある。いずれの場合も、最終的な責任はプロダクトオーナーが持つ。","スクラムガイド_2"
"スクラムマスターの役割","スクラムガイド_3"
"プロダクトオーナーの支援 効果的なプロダクトバックログの管理方法を探す。 明確で簡潔なプロダクトバックログアイテムの必要性についてスクラムチームに理解してもらう。 経験主義におけるプロダクトプランニングについて理解する。 価値を最大化するためにプロダクトバックログを調整する方法を知っている。 アジャイルを理解・実践している。 必要に応じてスクラムイベントをファシリテートする。開発チームの支援 自己組織化・機能横断的な開発チームをコーチする。 開発チームが価値の高いプロダクトを作れるように支援する。 開発チームの進捗を妨げるものを排除する。 必要に応じてスクラムイベントをファシリテートする。 スクラムがまだ完全に適用・理解されていない組織環境で、開発チームをコーチする。スクラムマスターは、さまざまな形で組織を支援する。 組織へのスクラムの導入を指導・コーチする。 組織へのスクラムの導入方法を計画する。 スクラムや経験的プロダクト開発を社員や関係者に理解・実施してもらう。 スクラムチームの生産性を高めるような変化を促す。","スクラムガイド_3"
"スプリントの目的","スクラムガイド_4"
" スプリントゴールに悪影響を及ぼすような変更を加えない。 品質目標を下げない。 学習が進むにつれてスコープが明確化され、プロダクトオーナーと開発チームの交渉が必要になる可能性がある。スプリントは1か月以内のプロジェクトと考えることができる。プロジェクトと同様に、スプリントは何かを成し遂げるために使うものである。","スクラムガイド_4"
"スプリントプランニング","スクラムガイド_5"
"スプリントの作業はスプリントプランニングで計画する。これはスクラムチームの共同作業だ。スプリントが1か月の場合、スプリントプランニングのタイムボックスは最大で8時間である。スプリントの期間が短ければ、スプリントプランニングの時間も短くすることが多い。スクラムマスターは、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。スプリントプランニングでは、以下の質問に答える。 スプリントの成果であるインクリメントで何を届けることができるか？ インクリメントを届けるために必要な作業をどのように成し遂げるか？","スクラムガイド_5"
"スプリントバックログ","スクラムガイド_6"
"プロダクトバックログアイテムを選択し、スプリントゴールを設定したら、開発チームはそれらの機能をスプリントで「完成」プロダクトインクリメントにする方法を決める。選択したプロダクトバックログアイテムとそれらを届ける計画を合わせて、スプリントバックログと呼ぶ。スプリントバックログは、スプリントで選択したプロダクトバックログアイテムと、それらのアイテムをプロダクトインクリメントにして届け、スプリントゴールを達成するための計画を合わせたものである。スプリントバックログは、開発チームが作成するインクリメントに含まれる機能と、その機能を「完成」インクリメントにして届けるために必要な作業の予想である。スプリントバックログによって、開発チームがスプリントゴールを達成するのに必要な作業がすべて見える化されている。スプリントバックログは十分に詳細であり、今後も変更される可能性のある計画である。それはデイリースクラムで理解できる程度のものである。開発チームは、スプリントでスプリントバックログを修正する。スプリントバックログはスプリントで創発される。こうした創発が発生するのは、開発チームが計画を実行するなかで、スプリントゴールの達成に必要な作業を学習するからである。新しい作業が必要になれば、開発チームがスプリントバックログに作業を追加する。作業が完了すれば、残作業の見積りを更新する。計画の要素が不要になれば削除する。スプリントでスプリントバックログを変更できるのは開発チームだけである。スプリントバックログには、開発チームがスプリントで行う作業がリアルタイムに反映される。スプリントバックログは開発チームのものである。","スクラムガイド_6"
"スプリントゴール","スクラムガイド_7"
"スプリントゴールはスプリントの目標セットであり、プロダクトバックログの実装によって実現するものである。これは開発チームがインクリメントを構築する理由を知る指針となる。スプリントゴールはスプリントプランニングで作成する。スプリントゴールを設定することで、開発チームがスプリント終了までに実装する機能を柔軟にできる。選択したプロダクトバックログアイテムは、一貫性のある機能として届けられる。それがスプリントゴールになることもある。スプリントゴールがあれば、開発チームは一致団結して作業ができる。開発チームが計画するときには、スプリントゴールを念頭に置く。スプリントゴールを達成するために、それらの機能や技術を実装する。開発チームの予想よりも難しいと判明した場合は、プロダクトオーナーと交渉してスプリントバックログのスコープを調整する。","スクラムガイド_7"
"デイリースクラム","スクラムガイド_8"
"デイリースクラムとは、開発チームが活動の速度を合わせ、次の24時間の計画を作る15分間のタイムボックスのイベントである。前回のデイリースクラムから行った作業の検査と、次回のデイリースクラムまでに行う作業の予想を行う。デイリースクラムは毎日、同じ時間・場所で開催する。これは、複雑にならないようにするためである。デイリースクラムでは、開発チームのメンバーが以下のことを説明する。 開発チームがスプリントゴールを達成するために、私が昨日やったことは何か？ 開発チームがスプリントゴールを達成するために、私が今日やることは何か？ 私や開発チームがスプリントゴールを達成するときの障害物を目撃したか？開発チームはデイリースクラムを使って、スプリントゴールとスプリントバックログの作業の進捗を検査する。デイリースクラムは、開発チームがスプリントゴールを達成する可能性を最適化する。開発チームは、自己組織化チームとしてスプリントゴールを達成し、スプリント終了までに期待されるインクリメントを作成できるかを毎日把握しなければいけない。開発チームまたは一部のチームメンバーは、デイリースクラムの終了直後に集まり、スプリントの残作業について詳細な議論・適応・再計画を行うこともある。スクラムマスターは、開発チームにデイリースクラムを開催してもらうようにする。ただし、デイリースクラムを開催する責任は開発チームにある。スクラムマスターは、デイリースクラムを15分間のタイムボックスで終わらせるように開発チームに伝える。スクラムマスターは、デイリースクラムには開発チームのメンバーしか参加できないというルールを遵守する。デイリースクラムは、コミュニケーションを改善し、その他のミーティングを取り除き、開発の障害物を特定・排除し、迅速な意思決定を強調・助長して、開発チームのプロジェクト知識のレベルを向上させるものである。これは、検査と適応の重要なイベントである。","スクラムガイド_8"
"スプリントレビュー","スクラムガイド_9"
"スプリントレビューとは、スプリントの終わりにインクリメントの検査と、必要であればプロダクトバックログの適応を行うものである。スプリントレビューでは、スクラムチームと関係者がスプリントの成果をレビューする。スプリントの成果とプロダクトバックログの変更を参考にして、価値を最適化するために次に何ができるかを参加者全員で話し合う。これはステータスミーティングではなく、非公式なミーティングである。インクリメントを提示することで、フィードバックやさらなる協力を引き出すことを目的とする。スプリントが1か月の場合、スプリントレビューのタイムボックスは4時間である。スプリントの期間が短ければ、スプリントレビューの時間も短くすることが多い。スクラムマスターは参加者に目的を理解してもらうようにする。スクラムマスターはスクラムチームにタイムボックスを守るように伝える。スプリントレビューには、以下の要素が含まれる。 参加者（スクラムチームと重要な関係者）はプロダクトオーナーが招待する。 プロダクトオーナーは、プロダクトバックログアイテムの「完成」したものと「完成」していないものについて説明する。 開発チームは、スプリントでうまくいったこと・直面した問題点・それをどのように解決したかを議論する。 開発チームは、「完成」したものをデモして、インクリメントに対する質問に答える。 プロダクトオーナーは、現在のプロダクトバックログを審議する。（必要であれば）現在の進捗から完了日を予測する。 グループ全体で次に何をするかを議論し、次のスプリントプランニングに価値のあるインプットを提供できるようにする。 プロダクトの市場や今後の利用状況についてレビューした場合、次に行う最も価値の高いことが変更されることもある。 プロダクトの次のリリースに対するスケジュール・予算・性能・市場をレビューする。スプリントレビューの成果は、次のスプリントで使用するプロダクトバックログアイテムが含まれた改訂版のプロダクトバックログである。新たな機会に見合うように、プロダクトバックログを全体的に調整することもある。","スクラムガイド_9"
"アジャイル","スクラム入門_1"
"入門","スクラム入門_1"
"概要","スクラム入門_1"
"原則","スクラム入門_1"
"アジャイル開発手法は、“商品開発における学び、イノベーション、変化等、より実践に基づいた方法にすれば、より良い結果をもたらす”という信念によって生まれました。アジャイルの原則は、事前に仕様を書く多くの時間を費やすことよりも、すぐに出荷できる動く製品（ソフトウェア等）を重視します。アジャイル開発は、大きな組織階層や機能による細分化よりも、決定権が与えられた職能上の枠組みを越えたチームにし、継続的な顧客への情報提供を短期間で繰り返すことを重視します。よくアジャイル開発やスクラムを学ぶと、初心に戻ったように「そうすれば良かったのか。」と気付くことがあります。","スクラム入門_1"
"利用","スクラム入門_２"
"企業","スクラム入門_２"
"スクラム","スクラム入門_２"
"スクラムは企業の大小に関わらず利用されています。Yahoo!、Microsoft、Google、Lockheed Martin、Motorola、SAP、Cisco、GE、CapitalOne、アメリカ連邦準備銀行等が含まれます。","スクラム入門_２"
"概要","スクラム入門_3"
"スクラム","スクラム入門_3"
"やり方","スクラム入門_3"
"手法","スクラム入門_3"
"スクラムは、企画や製品開発もしくはアプリケーション開発を繰り返しながら漸増するフレームワークです。スプリントと呼ばれる周期で、開発を構成します。これらの繰り返し期間（スプリント）は1カ月未満で途切れることなく連続します。スプリントはタイムボックス化され、作業完了の有無に関わらず、具体的な期日で終了します。決して延長されません。各スプリントの始めに、職能上の枠を超えたチームは優先されるリストから（顧客の要求）項目を選びます。チームは、スプリント終了までに選択した全ての項目を完了させることを公約します。スプリントの間は、選ばれた項目は変更しません。毎日チームは集まって、手短に進捗を確認し、残りの仕事を終わらせるのに必要な次の作業を調整します。スプリント終了時に、チームは利害関係者と共に、構築した製品を実際に用いてスプリントを検査します。参加者は、次のスプリントで具現化できるフィードバックを得ます。スプリント終了時に、本当に価値のある製品が「実現」されることを強調します。スクラムの大きなテーマは、「検査と適応」です。スクラムは開発工程を短くし、成果物と実務の有効性を検査します。そして、プロダクトのゴールとプロセスを適応します。これを継続的に繰り返します。","スクラム入門_3"
"役割","スクラム入門_4"
"チーム","スクラム入門_4"
"スクラムチーム","スクラム入門_4"
"スクラムには、プロダクトオーナー、チーム、スクラムマスターの３つの役割があります。これらはスクラムチームとして知られています。","スクラム入門_4"
"プロダクトオーナー","スクラム入門_５"
"オーナー","スクラム入門_５"
"責任","スクラム入門_５"
"優先順位付け","スクラム入門_５"
"プロダクトオーナーは、製品特性を特定し投資収益率（ROI）を最大化することに責任があります。最優先リストの優先順位付けを継続的に見直し、次のスプリントのために、どの（顧客の要求）項目が上位にあるべきかを決めてます。プロダクトオーナーは従来の製品管理者とは少し異なります。なぜならば、開発権限をプロジェクト管理者に委ねのではなく、自らスプリント毎に優先順位をつけ、結果を検査するなど、チームと積極的かつ頻繁に交流します。スクラムでは、最終的な権限を持つプロダクトオーナーは、必ず一人であり、仕事の価値に対して責任を持つことに注意しなければなりません。","スクラム入門_５"
"チーム","スクラム入門_６"
"フィーチャーチーム","スクラム入門_６"
"ハムエッグ","スクラム入門_６"
"製造","スクラム入門_６"
"チームは、アプリケーションやウェブサイト等、プロダクトオーナーが示唆する製品を造ります。“自己組織（自己管理）” し、とても高い自律性と製品に対して責任があります。スクラムのよくある話では、チームは “ブタ”、他者は “ニワトリ” として知られています。これは、「ハムエッグ」というレストランを開店しようとするブタとニワトリの物語（冗談話）からきています。その物語の中でブタは「私は身を削るのに、ニワトリは少し関わるだけじゃないか。」と迷います。）スクラムにおけるチームは、７人 ± ２人です。ソフトウェア開発の場合、チームは、分析、開発、テスト、インターフェース設計、データベース設計、アーキテクチャ、書類作成等の能力を持った人で構成されます。チームはプロダクトオーナーに、製品開発と製品の価値向上に関するアイデアを提供します。全メンバーが、スプリント期間に１つの製品開発に１００％集中することができれば、最も生産性が高く効果的です。なので、複数の企画や製品の仕事をすることを避けて下さい。安定したチームには高い生産力があるので、メンバー変更は避けて下さい。多人数の集団に適用する場合では、複数のスクラムチームで構成されます。綿密な調整を行い、各チームが製品の異なる特性に集中します。１つのチームが、徹底的な顧客中心思考で、全ての作業（計画、分析、プログラミング、テスト）を行います。チームは、フィーチャーチームと言われることもあります。","スクラム入門_６"
"スクラムマスター","スクラム入門_７"
"マスター","スクラム入門_７"
"支援","スクラム入門_７"
"スクラムマスターは、チームとプロダクトオーナーがうまくいくための支援者であり、チームの管理者でもプロジェクト管理者でもありません。外部からの干渉を守り、プロダクトオーナーとチームが、スクラムを最大限に活かせるように導きます。スクラムマスターは、（プロダクトオーナー、管理者を含む）全員に対し、スクラムの正しい理解と実践を支援します。また、アジャイル開発で成功することを義務付けられる組織の困難な変化を牽引します。スクラムは、多くの障害、チームの危険、プロダクトオーナーの有効性を明らかにします。※小さいチームでは、チームメンバーが役割を果たせるかもしれませんどのような経歴もしくは、工学、デザイン、テスト、製品管理、プロジェクト管理、品質管理等の能力をを持っていても、優秀なスクラムマスターになれます。ただし、スクラムマスターとプロダクトオーナーは、同じ人がなることはできません。なぜなら、スクラムマスターがプロダクトオーナーの依頼を断ることもしなければならないからです（例えば、スプリントの途中で、新たな成果物の発表）。また、スクラムマスターはプロジェクト管理者とは異なります。スクラムマスターは、何をすべきか指示したり、タスクを割り当てたりしません。彼らは、工程を促進したり、チームの自己組織化と自己管理化を支援します。もし、スクラムマスターが以前はチーム管理者だった場合、 スクラムで成功させるためには、考え方や交流スタイルを大きく変えなければならいでしょう。","スクラム入門_７"
"プロダクトバックログ","スクラム入門_8"
"優先順位リスト","スクラム入門_8"
"最終系","スクラム入門_8"
"ろーふぉマップ","スクラム入門_8"
"プロダクトバックログとは、洗練された特性（項目）の優先順位リストです。このバックログは、製品の存続期間を終えても残り（進化し）ます。これは、製品のロードマップです。“優先順位に従って、チームが完成させた全ての項目” も含め最終的な状態を表したり、プロダクトオーナーが、利害関係者の利益やチームに影響されること等、すべての領域を考慮して優先順位付けに必要です。プロダクトバックログは、様々な項目を含んでいますが、探求や調査の仕事は含まれません。プロダクトバックログは、プロダクトオーナーによって継続的に、顧客要求の変化、新しいアイデアや洞察、競合他社の動向、技術的障害等が更新されます。チームは、プロダクトバックログの各アイテムに必要な規模見積りをプロダクトオーナーに提供します。さらに、プロダクトオーナーには、各項目のビジネス価値を見積る責任があります。大抵、プロダクトオーナーはこの作業に慣れていません。この場合、スクラムマスターは、プロダクトオーナーが出来るように支援します。プロダクトオーナーは、投資収益率（ROI）を最大化するため（少ない労力で、高い価値のある項目を選びます）もしくは、副次的にいくつかの主なリスクを軽減するために、バックログの優先順位付けます。（実際は、リリースバックログの部分集合）とすると、これらの規模と価値の見積りは、各スプリントで学ぶことによって、新しくなるかもしれません。その結果、プロダクトバックログの継続的な再優先順位付けは絶えず更新されます。","スクラム入門_8"
"アジャイルってどうなのかね？","よくある日常_1"
"知りません、まずはググってみて再度質問してください。","よくある日常_1"
"アジャイルはうちの会社には向いてないよ","よくある日常_10"
"あなたは会社の代表として発言をしているのでしょうか？そうでなければ目の前の仕事をしてください。もしくは向いていない理由を一から説明してみて下さい、話はそれからです。","よくある日常_10"
"スキルが低くてもアジャイルってできますか？","よくある日常_11"
"できるできないよりも、やるかやらないか。やるかやらないかよりも、やりたいかやりたくないのかが重要です。","よくある日常_11"
"アジャイル界隈の人って攻撃的ですよね","よくある日常_12"
"異なる価値観を持つ人同士では、場合によって攻撃的だと受け取られることもあるかもしれません。アジャイルはウォーターフォール型開発のアンチテーゼ的な位置づけであり、考え方ややり方の多くは従来を否定することになるかもしれません。神社の方に「キリストが神です」と説くようなものです。","よくある日常_12"
"マネージャーってなにするの？","よくある日常_13"
"人員の選定や育成、フィードバック、衝突の解決から激しい議論の誘発とコントロールなどに注力してください。また指示や管理を抑え、ビジョンの共有や協調性の強化を促進してください。開発チームの邪魔にならないよう、規則遵守作業を受け持つなど縁の下の力持ちとなってください。","よくある日常_13"
"アジャイルってっ儲かるの？","よくある日常_2"
"わかりません、儲かるか儲からないかは人次第です。","よくある日常_2"
"アジャイルやりたくないんだけど","よくある日常_3"
"そうですね、やらないほうが良いと思います。","よくある日常_3"
"アジャイルやると仕様変更対応がつらいんだよね","よくある日常_4"
"仕様変更が辛いのはウォーターフォール型の開発です。あなたのそれはアジャイル的な開発じゃないかもしれません。なにが「つらい」のか具体的に教えて下さい。","よくある日常_4"
"俺にもわかるようにアジャイルを説明しろ","よくある日常_5"
"まずAmazonでアジャイルと名の付く書籍を調べ、５冊以上それぞれ２周読んできてください。話はそれからです。","よくある日常_5"
"詳細な管理がしたい","よくある日常_6"
"ゴールやビジョンを明確化して意思決定は現場に委ねましょう。さまざまな見える化のテクニックを学び、現場負担の少ないように遠くから見守りましょう。","よくある日常_6"
"詳細な指示をしたい","よくある日常_7"
"上位レベルの意図を正しく伝えることだけに注力してください。どう行動に起こすかは現場に決めてもらいましょう。","よくある日常_7"
"入念な調査のもと計画化したい","よくある日常_8"
"明確な方向性を示してください。入念な調査を行うことは予測精度の向上ではなくコミットメントする内容の詳細化に他なりません。","よくある日常_8"
"なんか宗教っぽくないですか？","よくある日常_9"
"ある特定の信仰にしたがって動くことは宗教と捉えられることもあるかもしれません。チームメンバーが同じ価値観にしたがって行動することに意味があります。","よくある日常_9"
