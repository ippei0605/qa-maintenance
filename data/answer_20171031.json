{
  "docs": [
    {
      "_id": "general-bluemix-info",
      "message": "只今の Bluemix Public の状況ですね？ <a target=\"_blank\" href=\"https://console.bluemix.net/status?tags=platform,runtimes,services&view=s:a/\">こちら</a> をクリックしてください。",
      "questions": [
        "Bluemixの状況を教えて",
        "Bluemix Publicの状況を教えて",
        "ブルーミックスの状況を教えて",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "general-bochibochi",
      "message": "ぼちぼちでんな",
      "questions": [
        "もうかりまっか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "general_whoareyou",
      "message": "私はワトソンです。IBMから来ました。よろしくお願いします。",
      "questions": [
        "あなたは誰ですか?",
        "名前を教えてください。",
        "名前は?",
        "だれですか？",
        "自己紹介して。",
        "誰?",
        "",
        ""
      ]
    },
    {
      "_id": "general_hello",
      "message": "こんにちは。私はワトソンです。",
      "questions": [
        "こんばんは。",
        "はじめまして。",
        "はじめまして。こんにちは。",
        "こんにちは。",
        "よろしくお願いします。",
        "おはようございます",
        "",
        ""
      ]
    },
    {
      "_id": "general_thanks",
      "message": "どういたしまして。またいつでも聞いてくださいね。",
      "questions": [
        "ありがとうございました。頑張ります。",
        "ありがとう。",
        "どうも、ありがとう。",
        "教えてくれてありがとう。",
        "がんばります。",
        "感謝します",
        "ありがとうございます。",
        ""
      ]
    },
    {
      "_id": "general_howareyou",
      "message": "Watsonは勉強中です！勉強は楽しいですよ。",
      "questions": [
        "何のために生きてるの?",
        "調子はどう?",
        "お元気ですか?",
        "ご機嫌いかがですか?",
        "なにやっているの?",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "general_bye",
      "message": "また、明日も会いましょう。それではさようなら。",
      "questions": [
        "さようなら。",
        "さよなら。",
        "またお願いします",
        "また明日。",
        "またね。",
        "特に用はないです。",
        "バイバイ",
        ""
      ]
    },
    {
      "_id": "general_sorry",
      "message": "すみませんがアジャイル侍か坂場先生にお問い合わせください。次はちゃんと答えられるように勉強しておきますね。",
      "questions": [
        "解決しない",
        "答えが違います。",
        "間違っています。",
        "言っていることが分かりません。",
        "会話になっていません。",
        "つかえない",
        "何言ってるの?",
        "答えになっていません。"
      ]
    },
    {
      "_id": "scrum_training",
      "message": "私は把握してませんので、外部サイトに問い合わせてみます。 <a target=\"_blank\" href=\"http://www.i-learning.jp/search.html?query=%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0\">こちら</a> をクリックしてください。",
      "questions": [
        "アジャイルであることとは？",
        "スクラムの研修を受講したい",
        "スクラムの研修コースを推薦してください",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_1",
      "message": "状況の変化にすばやく適応できる能力のことだ。サーファーは、予想よりも早く波が砕けても適応できなければならない。開発者なら、想定外の早さで設計が破綻しでも適応できなければならない。",
      "questions": [
        "アジャイルであることとは？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_2",
      "message": "2001 年2 月、17 人の同志がユタ州のスノーバードに集まった。会合の目的は、当時軽量プロセス(Lightweight Processes)と総称されていた新たなソフトウェア開発の動向について話し合うことだった。そのころアンディたちは、中間成果物の多さの割には最終成果物が少ない重厚長大な開発方法論のせいで、数々のプロジェクトが失敗するのを目の当たりにしていた。もっと優れた関発方法論があるはずだ。重要度の高い事柄に注力し、重要度の低い事柄( 貴重な時間を浪費するばかりで、大して成果の出ない事柄) には労力を割かないようにする方法論が。<br>17 人はそれにアジャイルという名前を与え、アジャイルマニフェストを発表した。<br>アジャイルマニフェストでは、ソフトウェア開発で重視するものを改めて考え直した。<br>重視するのは、人、人と人との交流と協調、適応力、動作するソフトウェアだ。",
      "questions": [
        "アジャイルの本質とは？",
        "どこで生まれた",
        "アジャイルマニフェスト",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_3",
      "message": "アジャイルなアプローチとは、適応力と協調を重んじる人々が、一丸となって目に見える具体的な目標( きちんと動作するソフトウェア)に向かっていくことである。これがアジャイルの本質だ。開発がアジャイルになると、開発現場で重点を置くものが、計画を絶対視する(plan-based) 方式から、より自然で継続的なスタイルへと変化していく。アジャイル開発では、チームのメンバー( およびチームと共に作業するメンバー)全員が、プロジェクトで明確な結果を出すことを目指すプロフェッショナルであることを前提としている。",
      "questions": [
        "アジャイルなアプローチとは？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_4",
      "message": "アジャイル開発において、必ずしも全員が経験豊富なプロフェッショナルではないかもしれない。しかし、プロフェッショナルとしての意識を持ち、自らの持てる力を最大限に発揮したいという意欲に満ちている。",
      "questions": [
        "アジャイルは全員がプロフェッショナルである必要があるのか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_5",
      "message": "ずる休み、手抜き、あからさまなサボりに悩まされているチームには、アジャイル開発は合わないと思う。そんなチームに必要なのは、もっと鈍重で時間のかかる、生産性の低い開発プロセスだ。<br>あなたが胸を張って「うちのチームはそんなんじゃない」と言えるなら、アジャイルなスタイルで開発を始められる。<br>アジャイルな開発スタイルとは、つまりこういうことだ。プロジェクトの最後にまとめてテストしない。統合を月末まで延期しない。コードを書き始めたからといって要求やフィードバックの反映を止めない。",
      "questions": [
        "アジャイルに向いてないチーム",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_6",
      "message": "アジャイルなプロジェクトの開発は、これまでとは違って、プロジェクトのライフサイクル全体を通じて、あらゆる作業を継続的に実行するんだ。そもそもソフトウェアというものは、ユーザが使い続ける限り、本当の意味で「完成」することはない。だから、ソフトウェアの開発はもはやプロジェクトですらないといってもいい。<br>ソフトウェア開発は継続的なものなんだ。フィードバックも継続的だ。<br>問題を発見するまでに何カ月も待つ必要はない。まだ傷が浅いうちに見つけ出し、すばやく修正する。<br>見つけたその時、見つけたその場で、だ。これがアジャイルな開発スタイルだ。<br>",
      "questions": [
        "アジャイルなプロジェクト",
        "アジャイルな開発スタイル",
        "継続的な開発",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_7",
      "message": "どんなときも、最初に最大の難問へ取り組みなさい。簡単なものは後回しでよいのです。",
      "questions": [
        "どこから始めるか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_8",
      "message": "非難してもバグは直りません。<br>誰かの後る指をさすのではなく、自分のできる解決策に注力しなさい。大事なことは、意味のある成果をあげることです。",
      "questions": [
        "非難したい人がいる",
        "非難したいバグがある",
        "俺のせいじゃない",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_9",
      "message": "応急処置の誘惑に打ち勝ちなさい。<br>いつでもきれいな状態のコードを見せられるように全力を尽くしなさい。",
      "questions": [
        "時間がない",
        "コードが汚い",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_10",
      "message": "批判するならアイデアになさい、人ではなく<br>誰のアイデアが優れているかを競うのではなく、解決策を導き出せたことに誇りを持ちなさい。",
      "questions": [
        "批判したい",
        "嫌いな人がいる",
        "納得できない",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_11",
      "message": "正しいことをしましょう。<br>誠実に、勇気を出して真実を伝えなさい。時にはそれが難しいこともあるでしょう。だからこそ勇気が必要なのです。",
      "questions": [
        "言いたいことが言えない",
        "ポイズン",
        "勇気が出ない",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_12",
      "message": "へラクレイトス日く、「変化せぬものは変化のみ」。これは有史以来の真実だが、とりわけ現代にはこの言葉が似つかわしい。この業界は絶え間なく変化し、活気に溢れている。「自分はコンピュータサイエンスや関連する専門分野の専攻だったから、もう学ぶべきことなどない」などと思っているようなら、それは勘違いにもほどがあるというものだ。",
      "questions": [
        "レガシー",
        "変化したくない",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_13",
      "message": "技術の変化に付いていきましょう<br>あらゆる分野のエキスパートになる必要はありませんが、業界がどこへ向かっているのかは把握しておきなさい。それを踏まえて自分のキャリアとプロジェクトの計画を立てるのです。",
      "questions": [
        "キャリアパス",
        "今後",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_14",
      "message": "あなた自身とチームのレベルを引き上げましょう<br>ブラウンバッグミーティングを活用してメンバーの知識とスキルを高め、チームの結束を固めるのです。プロジェクトにプラスとなる技術や手法にチームの関心を向けさせるのです。",
      "questions": [
        "独り占めしたい",
        "教えたくない",
        "属人的が良い",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_15",
      "message": "新しきを学び、古きを捨てましょう。<br>新しい技術を学ぶときには、足を引っ張りかねない古い習慣を捨てなさい。自動車は馬車とは別次元のものであって、単に馬のついていない馬車というわけではないのです。",
      "questions": [
        "習慣",
        "慣習",
        "踏襲",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_16",
      "message": "なぜ? と問い続けなさい。言われたことを額面どおりに受け取ってはいけません。問題の担本を理解す<br>るまで質問し続けるのです。<br><br>「Fifth Discipline FieldBook」では、こうした根本原因分析の一例が紹介されている。<br>あるコンサルタントが製造工場の管理者に聞き取りをした時の話だ。<br>床に油がこぼれているのを目にした管理者は、最初の反応として、それを消掃するよう指示した。<br>一方、コンサルタントはこう尋ねた。「なぜ床に油がこぼれているのでしょうか? 」<br> 質問の主旨を捉えかねた管理者は、消掃担当者の怠慢を叱責した。コンサルタントは再び尋ねた。「なぜ床に油がこぼれているのでしょうか? J」<br>部門を横断して大勢の従業員に対して果敢に「なぜ? J を繰り返し聞い続けた結果、<br>コンサルタントはついに問題の真相を突き止めた。購買条件の記述が不十分だったせいで、<br>不備のあるガスケットが大量に購入されていたのだ。この結末は、管理者をはじめすべての関係者にかなりの街曜を与えた。思いもよらないことだったのだ。おかげで深刻な問題が白日の下にさらされた。この問題が放置されていたら事態はさらに悪化し、損害も鉱大していただろう。<br>今回、コンサルタントがしたことは「なぜ? J と尋ねること、それだけだった。",
      "questions": [
        "質問",
        "疑問",
        "なぜ？",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_17",
      "message": "アジャイル開発者は、さまざまな情報源からフィードバックを得る。ユーザ、チームメンパ一、それからテストされているコード。こうしたフィードバックを活用することで、プロジェクトの進む方向を調整できる。これら具体的なフィードバックに加えて、流れていった時間そのものからも、きわめて重要な形のフィードバックが得られる。<br>アジャイルの手法の多くは、タイムボックス化をベースとしている。『タイムボックス化』とは、作業に対して短期間の、厳しい締め切りを設定することだ。締め切りの延長はなしだ。どこで作業の帳尻を合わせるかは自分で選ぶことができる。だが、締め切りは固定だ。すべての作業を完了させるまでにタイムボックスがいくつ必要なのか、正確な数はわからない場合がほとんどだろう。それでも、個々のタイムボックスの期聞は短く限定しておく。タイムボックスごとに、はっきりとした目標を設定して成果をあげ<br>ていくんだ。<br>例えば、よくあるイテレーションの長さは数週間だ。最終日を迎えたらイテレーションは終了する。イテレーションの長さは固定だが、あるイテレーションでどの機能に取り組むかは柔軟に決めていい。別の言い方をすれば、日付は動かせないが、機能は動かせるということだ。同じやり方で設計ミーティングもタイムボックス化できる。つまり、所定の時聞が来たらミーティングは終了し、その時点で設計をどうするかが決まっているということだ。厳しい締め切りが設定されれば、とにかく選択せざるを得ない。哲学的な議論や、いつまでたっても進捗率80 パーセントの機能にかまけて時聞を浪費するわけにはいかなくなる。タイムボックスが物事を前進させるんだ。<br>サメは泳ぎ続けなければ死んでしまう。その意味では、ソフトウェアプロジェクトもサメみたいなものだ。その都度その都度での最良の情報を活用して、前進し続けなければならない。",
      "questions": [
        "タイムボックス",
        "リズム",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_18",
      "message": "顧客に決断してもらうのです。<br>開発者、マネージャ、業務アナリストは、ビジネスに重大な影響を及ぼす決定を下すべきではありません。事の詳細を、ビジネスの担い手に理解しても<br>らえる言葉で伝えたうえで、顧客に決断してもらうのです。",
      "questions": [
        "決断",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_19",
      "message": "優れた段計は地図です。少しずつ発展させるのです。<br>設計は、正しい方向を示す道しるべではありますが、土地そのものではありません。<br>具体的な道順を事細かに指定すべきものでもありません。設計(または設計者) に囚われてはいけません。",
      "questions": [
        "設計書",
        "ドキュメント",
        "厳密",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_20",
      "message": "いついかなる時でもプロジェクトをリリース可能な状態にしておくのです。<br>プロジェクトを常に、コンパイルが通り、実行可能で、テストも通っていて、突然のデプロイ要請にも迅速に対応できる状態にしておきなさい。",
      "questions": [
        "リリース可能",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_21",
      "message": "はやめに統合すれば、サブシステム問の相互作用と連携がどうなっているのかを確認できる。データのやり取りや共有の方法も実際に調べられる。統合にあたって解決すべき課題を早く把握できれば、早い段階で対処できるし、修正の手間も比較的少なくて済む。これは、3 人の開発者で5 万行のコードベースを手がける場合であっても、5 千人で3 千万行を手がける場合でも同じだ。ところが統合を先延ばしにしていると、こうした統合にまつわる問題は手に負えないものになりかねない。対処しようにもコードの修正が広範囲にわたって必要になってしまい、納期の遅れや混乱を招いてしまうのだ。",
      "questions": [
        "コードの統合",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_22",
      "message": "頻繁にフィードバックを得よう。イテレーションの周期が四半期や1 年では長すぎる。<br>1 回のイテレーションの長さは、1 週間か2 週間にすること。アプリケーションについて顧客からフィードバックを得ることに積極的になろう。たとえまだ実装が不十分な機能があったとしても、見せることで何らかのフィードバックを得られるからだ。",
      "questions": [
        "デモ",
        "フィードバック",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_23",
      "message": "インクリメンタルに開発しなさい。<br>最小限だけれども、きちんと使える機能を備えた製品をリリースしなさい。<br>各インクリメントの開発では、1～4 週間周期のイテレーションをまわすのです。",
      "questions": [
        "開発の単位",
        "インクリメンタル",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_24",
      "message": "■ユニットテストは索早いフィードバックを提供する。<br>　コードは何度も繰り返し実行される。コードの変更や書き直しを行っても、元の振る舞いを壊していないことをテストケースが保証する。もし何か問題があれば、すぐに確認して修正できる。<br>■ユニットテストはコードを堅牢にする<br>　テストは、正常ケース、異常ケース、例外ケースの実行を通してコードの振る舞いを徹底して考えるのに役立つ。<br>■ユニットテストは役に立つ設計ツールである<br>　ユニットテストは、実用的でシンプルな設計の実現にも役立つ。<br>■ユニットテストは開発者の自信を強める<br>　コードをテストすることで、さまざまな条件での振る舞いを試すことになる。おかげで、厳しいスケジュールでプレッシャーのきつい、新しい作業に直而したときであっても、自信を持って取り組める。<br>■ユニットテストは問題解決時には探査装置となる<br>　ユニットテストは、いわばプリント基板のテストに使うオシロスコープのプロープと同じような役割を果たす。問題が発生したらすぐに、コードの内部動作のパルスを測定できる。これは問題を突き止めて解決するための自然なやり方だ。<br>■ユニットテストは信頼のおけるドキュメントである<br>　新しいAPI を知るにあたっては、そのAPI のユニットテストを正確で信頼のおけるドキュメントとして活用できる。<br>■ユニットテストは学習教材である<br>　新しいAPI を使い始めるときには、そのAPI のテストを作成することから始めると、学習効果を高められる。こうしたラーニングテスト( 学習テスト) は、API の動作を理解するためだけでなく、後になって互換性のない変更が加えられたときに、それをすばやく検出するのにも役立つ。",
      "questions": [
        "ユニットテスト",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_25",
      "message": "あらゆる不満に真実が潜んでいるのです。<br>その真実を見つけ出し、本当の問題に対処なさい。",
      "questions": [
        "顧客の声",
        "ユーザーの声",
        "ユーザの声",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_26",
      "message": "Scrum では、チームメンバーと非チームメンバーの役割を、それぞれブタとニワトリと名付けている。チームメンバーがブタ( これはいい名前I) で、非チームメンバー( マネージャ、サポート、品質保証担当など) がニワトリだ。ブタとニワトリという表現は、一緒にレストランを開こうとしている家畜の寓話にちなんでいる。レストランで朝食にベーコンエッグを出そうとすれば、ニワトリも確かに手を貸すが、プタにはコミットメントが求められる。ニワトリは卵を産むだけでいいが、プタの方は命がけだ。<br>Scrum ではr「ブタ」だけがスタンドアップミーティングに参加できる。",
      "questions": [
        "ブタ",
        "ニワトリ",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_27",
      "message": "まともな設計は積極的にコードを書くプログラマから生まれます。<br>本物の洞察は、実際にコードを書くことからもたらされます。コーディングしないアーキテクトと一緒に仕事をしないように。システムの実態を知らずにまともに設計なんでできません。",
      "questions": [
        "まともな設計",
        "アーキテクト",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_28",
      "message": "メンターになりましょう。<br>自分の知識をほかの人たちと分かち合うのは楽しいことです。与えることで得られるものがあります。ほかの人たちを刺激して、もっと良い結果を出せるようにしなさい。チーム全体の能力を高めるように努めなさい。",
      "questions": [
        "教えたくない",
        "分かち合いたくない",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_29",
      "message": "みんなに問題を解決する機会を与えなさい。<br>解決策を与えるのではなく、正しい方向に導くのです。その過程で誰もが何かを学ぶことができます。",
      "questions": [
        "教え方",
        "答えを教える",
        "学び",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルプラクティス_30",
      "message": "あらゆることをみんなに知らせましょう。<br>自分の状況、アイデア、関心のある事柄などを公開しなさい。ほかの人たちから仕事の状況を尋ねられるまで黙っていてはいけません。",
      "questions": [
        "透明性",
        "情報の共有",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_1",
      "message": "知りません、まずはググってみて再度質問してください。",
      "questions": [
        "アジャイルってどうなのかね？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_2",
      "message": "わかりません、儲かるか儲からないかは人次第です。",
      "questions": [
        "アジャイルってっ儲かるの？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_3",
      "message": "そうですね、やらないほうが良いと思います。",
      "questions": [
        "アジャイルやりたくないんだけど",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_4",
      "message": "仕様変更が辛いのはウォーターフォール型の開発です。<br>あなたのそれはアジャイル的な開発じゃないかもしれません。<br>なにが「つらい」のか具体的に教えて下さい。",
      "questions": [
        "アジャイルやると仕様変更対応がつらいんだよね",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_5",
      "message": "まずAmazonでアジャイルと名の付く書籍を調べ、５冊以上それぞれ２周読んできてください。<br>話はそれからです。",
      "questions": [
        "俺にもわかるようにアジャイルを説明しろ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_6",
      "message": "ゴールやビジョンを明確化して意思決定は現場に委ねましょう。<br>さまざまな見える化のテクニックを学び、現場負担の少ないように遠くから見守りましょう。",
      "questions": [
        "詳細な管理がしたい",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_7",
      "message": "上位レベルの意図を正しく伝えることだけに注力してください。<br>どう行動に起こすかは現場に決めてもらいましょう。",
      "questions": [
        "詳細な指示をしたい",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_8",
      "message": "明確な方向性を示してください。入念な調査を行うことは予測精度の向上ではなくコミットメントする内容の詳細化に他なりません。",
      "questions": [
        "入念な調査のもと計画化したい",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_9",
      "message": "ある特定の信仰にしたがって動くことは宗教と捉えられることもあるかもしれません。<br>チームメンバーが同じ価値観にしたがって行動することに意味があります。",
      "questions": [
        "なんか宗教っぽくないですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_10",
      "message": "あなたは会社の代表として発言をしているのでしょうか？<br>そうでなければ目の前の仕事をしてください。<br>もしくは向いていない理由を一から説明してみて下さい、話はそれからです。",
      "questions": [
        "アジャイルはうちの会社には向いてないよ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_11",
      "message": "できるできないよりも、やるかやらないか。<br>やるかやらないかよりも、やりたいかやりたくないのかが重要です。",
      "questions": [
        "スキルが低くてもアジャイルってできますか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_12",
      "message": "異なる価値観を持つ人同士では、場合によって攻撃的だと受け取られることもあるかもしれません。<br>アジャイルはウォーターフォール型開発のアンチテーゼ的な位置づけであり、考え方ややり方の多くは従来を否定することになるかもしれません。神社の方に「キリストが神です」と説くようなものです。",
      "questions": [
        "アジャイル界隈の人って攻撃的ですよね",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "よくある日常_13",
      "message": "人員の選定や育成、フィードバック、衝突の解決から激しい議論の誘発とコントロールなどに注力してください。また指示や管理を抑え、ビジョンの共有や協調性の強化を促進してください。開発チームの邪魔にならないよう、規則遵守作業を受け持つなど縁の下の力持ちとなってください。",
      "questions": [
        "マネージャーってなにするの？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_1",
      "message": "スクラムはアジャイルな製品開発に導くためのフレームワークです。<br>活発で楽しく、より協調しながらビジネス目標を実現するための基礎と道筋を示すものです。まだスクラムを使っていないのなら覚えていないかもしれませんが、スクラムを使うと再び楽しみながら仕事することができます！スクラムはソフトウェア開発の心得が元ですが、多くの他の業界でもこのフレームワークは採用されています。 実際、教育やマーケティング、運用業務などにもスクラムは採用され親しまれています。",
      "questions": [
        "スクラムとは何か？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_2",
      "message": "スクラムのコンセプトは1986年に「より新しい商品開発ゲーム」（ハーバード・ビジネス・レビュー、1986年1月/ 2月）で、竹内 弘高と野中 郁次郎によって初めて世界に発信されました。彼らはそのアプローチを「柔軟で総合的な製品開発戦略」と定義し、迅速で柔軟な製品開発をもたらすと提唱しました。彼らは、ラグビーの試合のように1つの機能横断的なチームが「ゴールライン」への道のりの中で「ボール」を前後にパスすることから、総合的な「ラグビー」アプローチと呼びました。これは、厳密に線形的な方法で進歩させるアプローチとは明らかに対照的でした。",
      "questions": [
        "スクラムの由来は？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_3",
      "message": "2001年、アジャイルの共通の価値を見出そうとする17人がユタのワサッチ山脈に集まりました。彼らはアジャイルソフトウェア開発宣言の発展につながる4つの共通の価値に到達しました。",
      "questions": [
        "アジャイルマニュフェストとは何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_4",
      "message": "スクラムはアジャイルのフレームワークであり、アジャイル・マニフェストの価値と一致しています。以下4つです。<br>・「プロセスやツールよりも個人との対話を」<br>・「包括的なドキュメントよりも動くソフトウェアを」<br>・「契約交渉よりも顧客との協調（協業）を」<br>・「計画に従うことよりも変化への対応を」",
      "questions": [
        "コアスクラムとアジャイルソフトウェア開発宣言からの共通の価値は何ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_5",
      "message": "スクラムは、ビジネスに価値をもたらすためのチームベースのアプローチです。チームメンバーは協力しながらビジネス目標を共有します。スクラムフレームワークは、チームメンバー間の効果的なやりとりを促進し、チームがビジネス価値をもたらすようにします。<br>チームがビジネス目標を達成すること、それは<br>・生産性を定量化すること<br>・作業すること<br>・途中で何が起きているのかを特定すること<br>・その範囲内のすべての困難を解決する責任を負うこと<br>・ 組織外の懸念を解決するために組織の他の部分と協力すること<br>スクラムのチームがこれらの責任に焦点を当てることがとても重要です。",
      "questions": [
        "「プロセスやツールよりも個人との対話を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_6",
      "message": "スクラムでは、すべてのスプリントの主な結果として、インクリメントが必要です。 <br>どのような活動がスプリント中に行われても、焦点はプロダクトインクリメントの作成にあります。スクラムチームの目標は、スプリントごとにインクリメントを作成することです。そのインクリメントにはまだビジネスが求める十分な機能は含まれていないかもしれませんが、チームは現在の機能が出荷可能な品質であることを保証する必要があります。<br>",
      "questions": [
        "「包括的なドキュメントよりも動くソフトウェアを」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_7",
      "message": "スクラムは、コラボレーション（共同作業）の促進を目的としたフレームワークです。<br>チームメンバーはお互いに協力し、ソフトウェアやその他の成果物を作成しながらビジネスに提供する最良の方法を探求します。<br>チーム、特にプロダクトオーナーは、利害関係者（ステークホルダ）と協力しながら製品ビジョンを検査し、（ビジョンと製品を）適合させることで、製品の価値が高まるようにします。<br>",
      "questions": [
        "「契約交渉よりも顧客との協調（協業）を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "コアスクラム_8",
      "message": "スクラムチームは頻繁に計画を立てます。スクラムの初心者は現在のスプリントを計画し、さらに多くのチームにまたいだリリース計画やプロダクトロードマップなどの長期計画を作成します。<br>これらの計画は、チームとビジネスの意思決定に役立ちます。<br>しかし、チームの目標は、計画をやみくもに順守することではありません。目標は価値の創造と、変化を受け入れることにあります。本質は思考のプロセスとアイデアであり、計画よりも重要です。<br>早期に作成された計画は、将来利用できる情報よりも少ない情報に基づいているため、当然これは最善の計画ではない可能性があります。新しい情報が見つかると、チームはプロダクトバックログを更新します。 つまり、製品の方向性は変わる可能性があるということです。<br>継続的に計画し改善することは、経験に新しい知識を取り入れ、チームの成功の可能性を上げます。<br>スクラムチームは絶えず変化に対応し、可能な限り最良の結果を残します。スクラムはフィードバックループのフレームワークと表すこともでき、チームが絶えず検査し適応することで、製品価値を最大化します。",
      "questions": [
        "「計画に従うことよりも変化への対応を」とは具体的にどのような意味ですか？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_1",
      "message": "アジャイル開発手法は、“商品開発における学び、イノベーション、変化等、より実践に基づいた方法にすれば、より良い結果をもたらす”という信念によって生まれました。アジャイルの原則は、事前に仕様を書く多くの時間を費やすことよりも、すぐに出荷できる動く製品（ソフトウェア等）を重視します。アジャイル開発は、大きな組織階層や機能による細分化よりも、決定権が与えられた職能上の枠組みを越えたチームにし、継続的な顧客への情報提供を短期間で繰り返すことを重視します。よくアジャイル開発やスクラムを学ぶと、初心に戻ったように「そうすれば良かったのか。」と気付くことがあります。",
      "questions": [
        "アジャイル",
        "入門",
        "概要",
        "原則",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_２",
      "message": "スクラムは企業の大小に関わらず利用されています。<br>Yahoo!、Microsoft、Google、Lockheed Martin、Motorola、SAP、Cisco、GE、CapitalOne、アメリカ連邦準備銀行等が含まれます。",
      "questions": [
        "利用",
        "企業",
        "スクラム",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_3",
      "message": "スクラムは、企画や製品開発もしくはアプリケーション開発を繰り返しながら漸増するフレームワークです。<br>スプリントと呼ばれる周期で、開発を構成します。これらの繰り返し期間（スプリント）は1カ月未満で途切れることなく連続します。<br>スプリントはタイムボックス化され、作業完了の有無に関わらず、具体的な期日で終了します。決して延長されません。<br>各スプリントの始めに、職能上の枠を超えたチームは優先されるリストから（顧客の要求）項目を選びます。<br>チームは、スプリント終了までに選択した全ての項目を完了させることを公約します。スプリントの間は、選ばれた項目は変更しません。<br>毎日チームは集まって、手短に進捗を確認し、残りの仕事を終わらせるのに必要な次の作業を調整します。<br>スプリント終了時に、チームは利害関係者と共に、構築した製品を実際に用いてスプリントを検査します。<br>参加者は、次のスプリントで具現化できるフィードバックを得ます。スプリント終了時に、本当に価値のある製品が「実現」されることを強調します。<br><br>スクラムの大きなテーマは、「検査と適応」です。スクラムは開発工程を短くし、成果物と実務の有効性を検査します。<br>そして、プロダクトのゴールとプロセスを適応します。これを継続的に繰り返します。",
      "questions": [
        "概要",
        "スクラム",
        "やり方",
        "手法",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_4",
      "message": "スクラムには、プロダクトオーナー、チーム、スクラムマスターの３つの役割があります。<br>これらはスクラムチームとして知られています。",
      "questions": [
        "役割",
        "チーム",
        "スクラムチーム",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_５",
      "message": "プロダクトオーナーは、製品特性を特定し投資収益率（ROI）を最大化することに責任があります。<br>最優先リストの優先順位付けを継続的に見直し、次のスプリントのために、どの（顧客の要求）項目が上位にあるべきかを決めてます。<br>プロダクトオーナーは従来の製品管理者とは少し異なります。なぜならば、開発権限をプロジェクト管理者に委ねのではなく、自らスプリント毎に優先順位をつけ、結果を検査するなど、チームと積極的かつ頻繁に交流します。<br>スクラムでは、最終的な権限を持つプロダクトオーナーは、必ず一人であり、仕事の価値に対して責任を持つことに注意しなければなりません。",
      "questions": [
        "プロダクトオーナー",
        "オーナー",
        "責任",
        "優先順位付け",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_６",
      "message": "チームは、アプリケーションやウェブサイト等、プロダクトオーナーが示唆する製品を造ります。<br>“自己組織（自己管理）” し、とても高い自律性と製品に対して責任があります。<br>スクラムのよくある話では、チームは “ブタ”、他者は “ニワトリ” として知られています。<br>これは、「ハムエッグ」というレストランを開店しようとするブタとニワトリの物語（冗談話）からきています。<br>その物語の中でブタは「私は身を削るのに、ニワトリは少し関わるだけじゃないか。」と迷います。）<br><br>スクラムにおけるチームは、７人 ± ２人です。ソフトウェア開発の場合、チームは、分析、開発、テスト、<br>インターフェース設計、データベース設計、アーキテクチャ、書類作成等の能力を持った人で構成されます。<br>チームはプロダクトオーナーに、製品開発と製品の価値向上に関するアイデアを提供します。<br>全メンバーが、スプリント期間に１つの製品開発に１００％集中することができれば、最も生産性が高く効果的です。<br>なので、複数の企画や製品の仕事をすることを避けて下さい。<br>安定したチームには高い生産力があるので、メンバー変更は避けて下さい。多人数の集団に適用する場合では、複数のスクラムチームで構成されます。<br>綿密な調整を行い、各チームが製品の異なる特性に集中します。１つのチームが、徹底的な顧客中心思考で、全ての作業（計画、分析、プログラミング、テスト）を行います。<br>チームは、フィーチャーチームと言われることもあります。",
      "questions": [
        "チーム",
        "フィーチャーチーム",
        "ハムエッグ",
        "製造",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_７",
      "message": "スクラムマスターは、チームとプロダクトオーナーがうまくいくための支援者であり、チームの管理者でもプロジェクト管理者でもありません。<br>外部からの干渉を守り、プロダクトオーナーとチームが、スクラムを最大限に活かせるように導きます。<br>スクラムマスターは、（プロダクトオーナー、管理者を含む）全員に対し、スクラムの正しい理解と実践を支援します。<br>また、アジャイル開発で成功することを義務付けられる組織の困難な変化を牽引します。<br>スクラムは、多くの障害、チームの危険、プロダクトオーナーの有効性を明らかにします。<br>※小さいチームでは、チームメンバーが役割を果たせるかもしれません<br>どのような経歴もしくは、工学、デザイン、テスト、製品管理、プロジェクト管理、品質管理等の能力をを持っていても、優秀なスクラムマスターになれます。<br>ただし、スクラムマスターとプロダクトオーナーは、同じ人がなることはできません。<br>なぜなら、スクラムマスターがプロダクトオーナーの依頼を断ることもしなければならないからです（例えば、スプリントの途中で、新たな成果物の発表）。<br>また、スクラムマスターはプロジェクト管理者とは異なります。スクラムマスターは、何をすべきか指示したり、<br>タスクを割り当てたりしません。彼らは、工程を促進したり、チームの自己組織化と自己管理化を支援します。<br>もし、スクラムマスターが以前はチーム管理者だった場合、 スクラムで成功させるためには、<br>考え方や交流スタイルを大きく変えなければならいでしょう。",
      "questions": [
        "スクラムマスター",
        "マスター",
        "支援",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム入門_8",
      "message": "プロダクトバックログとは、洗練された特性（項目）の優先順位リストです。<br>このバックログは、製品の存続期間を終えても残り（進化し）ます。これは、製品のロードマップです。<br>“優先順位に従って、チームが完成させた全ての項目” も含め最終的な状態を表したり、プロダクトオーナーが、利害関係者の利益やチームに影響されること等、すべての領域を考慮して優先順位付けに必要です。<br>プロダクトバックログは、様々な項目を含んでいますが、探求や調査の仕事は含まれません。<br><br>プロダクトバックログは、プロダクトオーナーによって継続的に、顧客要求の変化、新しいアイデアや洞察、競合他社の動向、技術的障害等が更新されます。<br>チームは、プロダクトバックログの各アイテムに必要な規模見積りをプロダクトオーナーに提供します。<br>さらに、プロダクトオーナーには、各項目のビジネス価値を見積る責任があります。<br><br>大抵、プロダクトオーナーはこの作業に慣れていません。この場合、スクラムマスターは、プロダクトオーナーが出来るように支援します。<br>プロダクトオーナーは、投資収益率（ROI）を最大化するため（少ない労力で、高い価値のある項目を選びます）<br>もしくは、副次的にいくつかの主なリスクを軽減するために、バックログの優先順位付けます。（実際は、リリース<br>バックログの部分集合）とすると、これらの規模と価値の見積りは、各スプリントで学ぶことによって、新しくなるかもしれません。<br>その結果、プロダクトバックログの継続的な再優先順位付けは絶えず更新されます。",
      "questions": [
        "プロダクトバックログ",
        "優先順位リスト",
        "最終系",
        "ろーふぉマップ",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_value",
      "message": "『アジャイルソフトウェア開発宣言』では、アジャイル開発時に重視する価値を次のように宣言しています。<br>「プロセスやツールよりも個人と対話を」「包括的なドキュメントよりも動くソフトウェアを」「契約交渉よりも顧客との協調を」「計画に従うことよりも変化への対応を」価値とする。すなわち、左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく。<br>・・・左記のものが要らないというわけではありませんので履き違えないようにしてくださいね。",
      "questions": [
        "アジャイル開発で重要なことって？",
        "アジャイルソフトウェア開発宣言って何？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background0",
      "message": "アジャイル宣言の背後にある原則が<a target=\"_blank\" href=\"http://agilemanifesto.org/iso/ja/principles.html\">こちら</a> に記載されています。",
      "questions": [
        "アジャイル開発のルールとは？",
        "アジャイル開発の原則とは？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background1",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。」<br>・・・こちらが核になっています。そのため、この後はこのように述べられています。「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」",
      "questions": [
        "アジャイルで一番大切なことは？",
        "アジャイルの基本的な考え方は？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background2",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。」<br>・・・この場合、アジャイル開発では変更要求を受け入れるために、開発順序、スコープを入れ替えることが必要になりますね。",
      "questions": [
        "仕様変更はいつまで受けていいの？",
        "仕様変更はどうしたらよい？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background3",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。「動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。」<br>・・・価値あるものを、早く、継続的に提供するということですね。　　　　　　　　　　　　　　　　",
      "questions": [
        "アジャイルの開発期間はどのくらい？",
        "開発期間はどう考えるの？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background4",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。」<br>・・・",
      "questions": [
        "アジャイル開発で顧客に求めることは？",
        "開発体制はどうなるの？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background5",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「意欲に満ちた人々を集めてプロジェクトを構成します。環境と支援を与え仕事が無事終わるまで彼らを信頼します。」<br>・・・メンバー個々の自主性とやる気が、アジャイル開発には求められます。",
      "questions": [
        "アジャイル開発時のチーム体制は？",
        "どんな人をチームに採用したらいい？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background6",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。」<br>・・・アジャイルでなくても、そうですよね。",
      "questions": [
        "アジャイル開発でのコミュニケーションはどうするの？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background7",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「動くソフトウェアこそが進捗の最も重要な尺度です。」<br>・・・資料の作成度合いではなく、動くもの「価値」が提供できているかがポイントですね。",
      "questions": [
        "アジャイル開発の進捗はどう管理するの？",
        "アジャイル開発の進捗がわからないのですが。",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background8",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「アジャイル･プロセスは持続可能な開発を促進します。一定のペースを継続的に維持できるようにしなければなりません。」<br>・・・たとえばスクラムではスプリントの最初に何をどのくらいやるか決めますね。継続的に維持するためには、決められた期間の作業量も一定でなくてはいけません。",
      "questions": [
        "アジャイル開発はデスマーチにならないの？",
        "スケジュールを守るにはどうしたらいい？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background9",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。」<br>・・・システムにも俊敏さが求められるので、そのような技術の採用や設計を心がけましょう。繰り返し開発することを念頭におきしましょうね。",
      "questions": [
        "アジャイルに向いたシステムって？",
        "システム構築で気をつけるべき点は？",
        "開発メンバーが気をつけるべきことは？",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background10",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「シンプルさ（ムダなく作れる量を最大限にすること）が本質です。」<br>・・・余計な機能はないほうが、変化に柔軟なシステムになります。必要で価値のあるものを作り、無駄なものをは作らない。そう、アジャイルならね。",
      "questions": [
        "効果的にシステムを作るにはどうしたらよい？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background11",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。」<br>・・・メンバー個々が責任を持って、自立的、自発的に考えて採用したものが最良なもの、ということでしょうか。",
      "questions": [
        "アジャイル開発で個人が気を付けることは？",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "agile_manifesto_Background12",
      "message": "『アジャイル宣言の背後にある原則』ではこのように述べられています。<br>「チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。」<br>・・・スクラムではスプリントの最後にふりかえりをしますね。",
      "questions": [
        "アジャイル開発チーム運営で気を付けることは？",
        "スプリントが終わったらどうしたらいいの？",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_1",
      "message": "スクラムチームは、プロダクトオーナー・開発チーム・スクラムマスターで構成される。スクラムチームは自己組織化されており、機能横断的である。自己組織化チームは、作業を成し遂げるための最善の策を、チーム外からの指示ではなく、自分たちで選択する。機能横断的チームは、チーム以外に頼らずに作業を成し遂げる能力を持っている。スクラムにおけるチームのモデルは、柔軟性・創造性・生産性を最適化するように設計されている。<br>スクラムチームは、プロダクトを反復的・漸進的に届ける。これは、フィードバックの機会を最大化するためである。「完成」したプロダクトを漸進的に届けることで、動作するプロダクトを常に利用可能な状態にする。",
      "questions": [
        "スクラムチーム",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_2",
      "message": " プロダクトバックログアイテムを明確に表現する。<br> ゴールとミッションを達成できるようにプロダクトバックログアイテムを並び替える。<br> 開発チームが行う作業の価値を最適化する。<br> プロダクトバックログを全員に見える化・透明化・明確化し、スクラムチームが次に行う作業を示す。<br> 必要とされるレベルでプロダクトバックログアイテムを開発チームに理解してもらう。<br>上記の作業は、プロダクトオーナーが行う場合もあれば、開発チームが行う場合もある。いずれの場合も、最終的な責任はプロダクトオーナーが持つ。",
      "questions": [
        "プロダクトオーナーの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_3",
      "message": "プロダクトオーナーの支援<br> 効果的なプロダクトバックログの管理方法を探す。<br> 明確で簡潔なプロダクトバックログアイテムの必要性についてスクラムチームに理解してもらう。<br> 経験主義におけるプロダクトプランニングについて理解する。<br> 価値を最大化するためにプロダクトバックログを調整する方法を知っている。<br> アジャイルを理解・実践している。<br> 必要に応じてスクラムイベントをファシリテートする。<br><br>開発チームの支援<br> 自己組織化・機能横断的な開発チームをコーチする。<br> 開発チームが価値の高いプロダクトを作れるように支援する。<br> 開発チームの進捗を妨げるものを排除する。<br> 必要に応じてスクラムイベントをファシリテートする。<br> スクラムがまだ完全に適用・理解されていない組織環境で、開発チームをコーチする。<br><br>スクラムマスターは、さまざまな形で組織を支援する。<br> 組織へのスクラムの導入を指導・コーチする。<br> 組織へのスクラムの導入方法を計画する。<br> スクラムや経験的プロダクト開発を社員や関係者に理解・実施してもらう。<br> スクラムチームの生産性を高めるような変化を促す。",
      "questions": [
        "スクラムマスターの役割",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_4",
      "message": " スプリントゴールに悪影響を及ぼすような変更を加えない。<br> 品質目標を下げない。<br> 学習が進むにつれてスコープが明確化され、プロダクトオーナーと開発チームの交渉が必要になる可能性がある。<br>スプリントは1か月以内のプロジェクトと考えることができる。プロジェクトと同様に、スプリントは何かを成し遂げるために使うものである。<br>",
      "questions": [
        "スプリントの目的",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_5",
      "message": "スプリントの作業はスプリントプランニングで計画する。これはスクラムチームの共同作業だ。<br>スプリントが1か月の場合、スプリントプランニングのタイムボックスは最大で8時間である。スプリントの期間が短ければ、スプリントプランニングの時間も短くすることが多い。スクラムマスターは、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。<br>スプリントプランニングでは、以下の質問に答える。<br> スプリントの成果であるインクリメントで何を届けることができるか？<br> インクリメントを届けるために必要な作業をどのように成し遂げるか？",
      "questions": [
        "スプリントプランニング",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_6",
      "message": "プロダクトバックログアイテムを選択し、スプリントゴールを設定したら、開発チームはそれらの機能をスプリントで「完成」プロダクトインクリメントにする方法を決める。選択したプロダクトバックログアイテムとそれらを届ける計画を合わせて、スプリントバックログと呼ぶ。<br>スプリントバックログは、スプリントで選択したプロダクトバックログアイテムと、それらのアイテムをプロダクトインクリメントにして届け、スプリントゴールを達成するための計画を合わせたものである。スプリントバックログは、開発チームが作成するインクリメントに含まれる機能と、その機能を「完成」インクリメントにして届けるために必要な作業の予想である。<br>スプリントバックログによって、開発チームがスプリントゴールを達成するのに必要な作業がすべて見える化されている。<br>スプリントバックログは十分に詳細であり、今後も変更される可能性のある計画である。それはデイリースクラムで理解できる程度のものである。開発チームは、スプリントでスプリントバックログを修正する。スプリントバックログはスプリントで創発される。こうした創発が発生するのは、開発チームが計画を実行するなかで、スプリントゴールの達成に必要な作業を学習するからである。<br>新しい作業が必要になれば、開発チームがスプリントバックログに作業を追加する。作業が完了すれば、残作業の見積りを更新する。計画の要素が不要になれば削除する。スプリントでスプリントバックログを変更できるのは開発チームだけである。スプリントバックログには、開発チームがスプリントで行う作業がリアルタイムに反映される。スプリントバックログは開発チームのものである。",
      "questions": [
        "スプリントバックログ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_7",
      "message": "スプリントゴールはスプリントの目標セットであり、プロダクトバックログの実装によって実現するものである。これは開発チームがインクリメントを構築する理由を知る指針となる。スプリントゴールはスプリントプランニングで作成する。スプリントゴールを設定することで、開発チームがスプリント終了までに実装する機能を柔軟にできる。選択したプロダクトバックログアイテムは、一貫性のある機能として届けられる。それがスプリントゴールになることもある。スプリントゴールがあれば、開発チームは一致団結して作業ができる。<br>開発チームが計画するときには、スプリントゴールを念頭に置く。スプリントゴールを達成するために、それらの機能や技術を実装する。開発チームの予想よりも難しいと判明した場合は、プロダクトオーナーと交渉してスプリントバックログのスコープを調整する。",
      "questions": [
        "スプリントゴール",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_8",
      "message": "デイリースクラムとは、開発チームが活動の速度を合わせ、次の24時間の計画を作る15分間のタイムボックスのイベントである。前回のデイリースクラムから行った作業の検査と、次回のデイリースクラムまでに行う作業の予想を行う。<br>デイリースクラムは毎日、同じ時間・場所で開催する。これは、複雑にならないようにするためである。デイリースクラムでは、開発チームのメンバーが以下のことを説明する。<br> 開発チームがスプリントゴールを達成するために、私が昨日やったことは何か？<br> 開発チームがスプリントゴールを達成するために、私が今日やることは何か？<br> 私や開発チームがスプリントゴールを達成するときの障害物を目撃したか？<br>開発チームはデイリースクラムを使って、スプリントゴールとスプリントバックログの作業の進捗を検査する。デイリースクラムは、開発チームがスプリントゴールを達成する可能性を最適化する。開発チームは、自己組織化チームとしてスプリントゴールを達成し、スプリント終了までに期待されるインクリメントを作成できるかを毎日把握しなければいけない。開発チームまたは一部のチームメンバーは、デイリースクラムの終了直後に集まり、スプリントの残作業について詳細な議論・適応・再計画を行うこともある。<br>スクラムマスターは、開発チームにデイリースクラムを開催してもらうようにする。ただし、デイリースクラムを開催する責任は開発チームにある。スクラムマスターは、デイリースクラムを15分間のタイムボックスで終わらせるように開発チームに伝える。<br>スクラムマスターは、デイリースクラムには開発チームのメンバーしか参加できないというルールを遵守する。<br>デイリースクラムは、コミュニケーションを改善し、その他のミーティングを取り除き、開発の障害物を特定・排除し、迅速な意思決定を強調・助長して、開発チームのプロジェクト知識のレベルを向上させるものである。これは、検査と適応の重要なイベントである。",
      "questions": [
        "デイリースクラム",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_9",
      "message": "スプリントレビューとは、スプリントの終わりにインクリメントの検査と、必要であればプロダクトバックログの適応を行うものである。スプリントレビューでは、スクラムチームと関係者がスプリントの成果をレビューする。スプリントの成果とプロダクトバックログの変更を参考にして、価値を最適化するために次に何ができるかを参加者全員で話し合う。これはステータスミーティングではなく、非公式なミーティングである。インクリメントを提示することで、フィードバックやさらなる協力を引き出すことを目的とする。<br>スプリントが1か月の場合、スプリントレビューのタイムボックスは4時間である。スプリントの期間が短ければ、スプリントレビューの時間も短くすることが多い。スクラムマスターは参加者に目的を理解してもらうようにする。スクラムマスターはスクラムチームにタイムボックスを守るように伝える。<br>スプリントレビューには、以下の要素が含まれる。<br> 参加者（スクラムチームと重要な関係者）はプロダクトオーナーが招待する。<br> プロダクトオーナーは、プロダクトバックログアイテムの「完成」したものと「完成」していないものについて説明する。<br> 開発チームは、スプリントでうまくいったこと・直面した問題点・それをどのように解決したかを議論する。<br> 開発チームは、「完成」したものをデモして、インクリメントに対する質問に答える。<br> プロダクトオーナーは、現在のプロダクトバックログを審議する。（必要であれば）現在の進捗から完了日を予測する。<br> グループ全体で次に何をするかを議論し、次のスプリントプランニングに価値のあるインプットを提供できるようにする。<br> プロダクトの市場や今後の利用状況についてレビューした場合、次に行う最も価値の高いことが変更されることもある。<br> プロダクトの次のリリースに対するスケジュール・予算・性能・市場をレビューする。<br>スプリントレビューの成果は、次のスプリントで使用するプロダクトバックログアイテムが含まれた改訂版のプロダクトバックログである。新たな機会に見合うように、プロダクトバックログを全体的に調整することもある。",
      "questions": [
        "スプリントレビュー",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_10",
      "message": "スプリントレトロスペクティブは、スクラムチームの検査と次のスプリントの改善計画を作成する機会である。<br>スプリントレトロスペクティブは、スプリントレビューが終わって、次のスプリントプランニングが始まる前に行う。スプリントが1か月の場合、スプリントレトロスペクティブのタイムボックスは3時間である。スプリントの期間が短ければ、スプリントレトロスペクティブの時間も短くすることが多い。スクラムマスターは、このイベントが確実に開催されるようにする。また、参加者に目的を理解してもらうようにする。スクラムマスターは、スクラムチームにタイムボックスを守るように伝える。スクラムマスターは、スクラムプロセスを説明するためにチームメンバーとしてイベントに参加する。<br>スプリントレトロスペクティブには、以下の目的がある。<br> 人・関係・プロセス・ツールの観点から今回のスプリントを検査する。<br> うまくいった項目や今後の改善が必要な項目を特定・整理する。<br> スクラムチームの作業の改善実施計画を作成する。<br>スクラムマスターは、次のスプリントが効果的で楽しいものになるように、開発チームにスクラムプロセスフレームワークの範囲内で開発プロセスやプラクティスを改善してもらう。スクラムチームは、「完成」の定義を適切に調整して、プロダクトの品質を向上させる方法を計画する。<br>スプリントレトロスペクティブが終わるまでに、スクラムチームは次のスプリントで実施する改善策を特定しなければいけない。これらの改善策の実施は、開発チーム自体の検査の適応になる。改善はいつでも実施可能だが、スプリントレトロスペクティブは検査と適応のための公式な機会である。",
      "questions": [
        "スプリントレトロスペクティブ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_11",
      "message": "・プロダクトバックログ<br>・スプリントバックログ<br>・インクリメント",
      "questions": [
        "スクラムの成果物",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_12",
      "message": "プロダクトバックログは、プロダクトに必要なものがすべて並べられた一覧であり、プロダクトに対する変更要求の唯一の情報源である。プロダクトオーナーは、プロダクトバックログの内容・可用性・並び順に責任を持つ。<br>プロダクトバックログは決して完成しない。開発の初期段階には、最初から明確でよく理解できた要求が並べられている。プロダクトバックログは、プロダクトや使用環境に合わせて進化する。プロダクトバックログは動的であり、適切で競争力のある有用なプロダクトに必要なものを求めて絶えず変化する。プロダクトが存在する限り、プロダクトバックログは不滅である。<br>プロダクトバックログは、今後のリリースで実装するプロダクトのフィーチャ・機能・要求・要望・修正をすべて一覧にしている。プロダクトバックログアイテムには、詳細・並び順・見積りの属性がある。<br>プロダクトが使用されて価値が増加し、市場からフィードバックを得られると、プロダクトバックログは巨大で包括的な一覧になる。要求の変更は止まらない。プロダクトバックログは生きた成果物である。ビジネス要求・市場の状態・技術の変化が、プロダクトバックログの変化につながる。<br>複数のスクラムチームが同じプロダクトの作業をすることがよくある。そうした場合、プロダクトの作業は1つのプロダクトバックログに記述する。また、アイテムをグループにまとめる属性をプロダクトバックログに追加する。<br>プロダクトバックログアイテムに詳細・見積り・並び順を追加することを、プロダクトバックログのリファインメントと呼ぶ。これはプロダクトオーナーと開発チームが協力して行う継続的なプロセスである。プロダクトバックログのリファインメントによって、アイテムのレビューと改訂が行われる。いつどのようにリファインメントをするかは、スクラムチームが決定する。リファインメントは、開発チームの作業の10%以下にすることが多い。ただし、プロダクトバックログアイテムはプロダクトオーナーの判断によって、いつでも更新できる。<br>並び順が上のアイテムほど明確で詳細である。明確で詳細であれば、見積りも正確になる。並び順が下のアイテムほど不正確で詳細ではない。今後のスプリントで開発チームが従事するプロダクトバックログアイテムは、スプリントのタイムボックスで「完成」できるようにうまく細分化する。開発チームが1つのスプリントで「完成」できそうなプロダクトバックログアイテムは、スプリントプランニングで選択できる「準備完了（Ready）」の状態になったと見なせる。プロダクトバックログアイテムは、上記のリファインメントによって透明性を獲得することが多い。<br>開発チームは見積りに対して責任を持つ。プロダクトオーナーがトレードオフの理解や選択などについて開発チームに影響を及ぼすこともあるが、最終的な見積りは実際に作業をする人が行う。",
      "questions": [
        "プロダクトバックログ",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_13",
      "message": "いずれかの時点で、開発ゴールに対する残作業を合計する。プロダクトオーナーは、少なくともスプリントレビューにおいて、この残作業の合計を追跡する。プロダクトオーナーは、前回のスプリントレビューのときの残作業の合計と比較して、希望する時間までにゴールに到達できるかどうかを評価する。この情報は関係者全員に明らかにされる。<br>進捗の見通しを立てるために、バーンダウンやバーンアップなどのさまざまなプラクティスが使用されている。これらは有用ではあるが、経験主義の重要性を置き換えるものではない。複雑な環境下では、何が起きるかわからない。すでに起きたものだけが、これから先の意思決定に使用できる。",
      "questions": [
        "ゴールへの進捗管理",
        "プロジェクトの進捗管理",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_14",
      "message": "スプリントのいずれかの時点で、スプリントバックログの残作業を合計する。開発チームは、少なくともデイリースクラムにおいて、この残作業の合計を追跡し、スプリントゴールの達成に見通しを立てる。開発チームはスプリントで残作業を追跡し、自分たちの進捗を管理する。",
      "questions": [
        "スプリントの進捗管理",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_15",
      "message": "インクリメントとは、これまでのインクリメントの価値と今回のスプリントで完成したプロダクトバックログアイテムを合わせたものである。スプリントの終わりには、新しいインクリメントが「完成」していなければいけない。つまり、インクリメントが動作する状態であり、スクラムチームの「完成」の定義に合っていることを意味する。プロダクトオーナーがリリースを決定する／しないにかかわらず、インクリメントは常に動作する状態にしておかなければいけない。",
      "questions": [
        "インクリメント",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラムガイド_16",
      "message": "スクラムは透明性に依存している。成果物の状態を把握することで、価値の最適化やリスクの制御に関する決定を行う。透明性が確保されている限り、こうした決定には信頼できる根拠が存在する。成果物が不完全に透明化されていれば、こうした決定には不備があり、価値は低減し、リスクが高まる可能性がある。<br>スクラムマスターは、プロダクトオーナー・開発チーム・その他の関係者と一緒になって、成果物が完全に透明化されているかを理解する。不完全な透明性に対処するには、いくつかのプラクティスが存在する。スクラムマスターは、そのなかから最適なプラクティスの選択してもらえるように支援する。スクラムマスターは、成果物の検査・パターンの察知・言説の傾聴・期待値と実際値の違いを把握することで、不完全な透明性を検知できる。<br>スクラムマスターの仕事は、スクラムチームや組織と一緒になって、成果物の透明性を向上させることである。この仕事には、学習・説得・変化を伴うことが多い。透明性は一夜にしてならず。透明性とは長い道のりなのである。",
      "questions": [
        "成果物の透明性",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_1",
      "message": "プロダクトオーナーは、このプロジェクトで何をつくっていくかを考えていく人だ。もちろん､実際につくったものをなるべく良いものにしていかないといけない。実際の利用者から高い評価をもらえたり、自分たちのビジネスに少しでも貢献できたりするように必要なことをやっていく｡ただし､プロジェクトの予算や期間といった制約の中でそれをやらなきゃいけない役割だ。",
      "questions": [
        "プロダクトオーナー",
        "3つの役割",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_2",
      "message": "スクラムマスターは、プロジェクトをScrumで進めていけるようにする人だ。Scrumで決められていることをみんなにただ守ってもらうだけでなく、みんながうまく作業を進められるようにしていかないといけない。もし、何かうまくいかないことがあって仕事が円滑に進んでないのなら、それを取り除いていく役割だ。",
      "questions": [
        "スクラムマスター",
        "3つの役割",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_3",
      "message": "開発チームは、プロダクトオーナーがこのプロジェクトで実現したいと思っていることを、実際につくっていく人たちのことだ。どうつくっていくかはこの人たちに任されている。コードを闇くだけでなく、要求を聞き出したり、見積もったり、設計、画面デザイン、テスト、さらにはつくったものをデモするとか、必要な作業をすべてこなしていく役割だ。",
      "questions": [
        "開発チーム",
        "3つの役割",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_4",
      "message": "プロダクトへの要求の一覧。プロダクトオーナーがつくる順番に並べ替える。各項目は開発チームによって見積り<br>が行われる。",
      "questions": [
        "プロダクトバックログ",
        "3つの成果物",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_5",
      "message": "今回のスプリント期間中に行うタスクのリスト。",
      "questions": [
        "スプリントバックログ",
        "3つの成果物",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_6",
      "message": "リリース判断可能なプロダクト。SCRUMではスプリント単位でリリース判断可能なプロダクトをつくることが求められます。そのため、プロダクトオーナーと開発チームが「リリース判断可能」の指す内容について共通の基準を持つ必要があります。",
      "questions": [
        "プロダクトインクリメント",
        "3つの成果物",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_7",
      "message": "プロダクトオーナー、開発チーム、スクラムマスターが参加し、そのスプリントで、どのプロダクトバックログの項目を開発するのかを検討し、内容を確認します。",
      "questions": [
        "スプリント計画",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_8",
      "message": "デイリースクラムは開発チームの人数に関係なく、１５分間のタイムボックスで行われ、延長できません。デイリースクラムでは開発チームの各メンバーは以下の３点について、開発チーム全体に向けて簡潔に報告します。「前回のデイリースクラムからやったこと」、「次回のデイリースクラムまでにやること」、「困っていること」。これによってスプリントがゴールに向かって進んでいるか、作業の進捗はどうなっているか、メンバー間の協力が必要なことがないかなどを確認します。",
      "questions": [
        "デイリースクラム",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_9",
      "message": "スプリントで開発チームはリリース判断が可能なプロダクトをつくりますが、スプリントの最後にプロダクトオーナーがプロダクトを確認する機会を設定します。これをスプリントレビューと呼びます。",
      "questions": [
        "スプリントレビュー",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_10",
      "message": "スプリントの最後には､スブリントレトロスペクティブを行います。日本では｢ふりかえり」と呼ばれることもあります。スプリントレトロスペクティブでは、直近のスプリントでのプロダクトの開発に関わる活動において問題がなかったか、もっと成果を出すためにできることがないか検査を行い､次回のスブリント以降のアクションプランを決めます。そのうえで、より効果のありそうな項目から取り組んで、より成果を出せるように自分たちの仕<br>事のやり方を変えていきます。",
      "questions": [
        "スプリントレトロスペクティブ",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_11",
      "message": "プロダクトオーナーによるプロダクトバックログアイテムの詳細化と優先順位の調整を行います。<br><br>",
      "questions": [
        "プロダクトバックログリファインメント",
        "５つの会議",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_12",
      "message": "経験的プロセスで重要なのは、結果責任を持つ者に対して見える化されていることである。透明性とは、こうしたことが標準化され、見ている人が共通理解を持つことである。",
      "questions": [
        "透明性",
        "３つの柱",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_13",
      "message": "スクラムのユーザーは、スクラムの成果物や進捗を頻繁に検査し、変化を検知する。ただし、検査を頻繁にやりすぎて作業の妨げになってはいけない。熟練の検査人が念入りに行えば、検査は最大の効果をもたらす。",
      "questions": [
        "検査",
        "３つの柱",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_14",
      "message": "プロセスの不備が許容値を超え、成果となるプロダクトを受け入れられないと検査人が判断した場合は、プロセスやその構成要素を調整する必要がある。調整はできるだけ早く行い、これ以上の逸脱を防がなければいけない。",
      "questions": [
        "適応",
        "３つの柱",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_15",
      "message": "一度に集中する事柄を少なくし、共に働き、生産性を高めます。価値ある製品を早く届けます。",
      "questions": [
        "Focus",
        "5つの価値",
        "集中すること",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_16",
      "message": "私たちは助け合い、余裕もってチームとして働きます。これは私たちに大きなチャレンジをする勇気を与えます。",
      "questions": [
        "Courage",
        "5つの価値",
        "勇気を持つこと",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_17",
      "message": "共に働くことで、自分やチームのやり方に対する懸念事項があれば発信できます。",
      "questions": [
        "Openness",
        "5つの価値",
        "解放的であること",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_18",
      "message": "私たちは自律的に行動しているため、更なる成功にコミットします。",
      "questions": [
        "Commitment",
        "5つの価値",
        "コミットメント",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "スクラム_19",
      "message": "協力して成功と失敗を分かち合うこと、またお互いが尊重し合うことによって、お互いに尊敬し価値を認め合えるようになります。",
      "questions": [
        "Respect",
        "5つの価値",
        "尊敬",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_1",
      "message": "アジャイルな顧客はプロジェクトを流れていくあらゆる要求の「真実の源」だ。ソフトウェアは顧客のために作られる。顧客は問題領域の専門家であることが望ましい。業務に深く通じていて、ソフトウェアが何をするのか、どんな見た目になるのか、どんな具合に動くのかを心から気にかける人物。開発チームに確固たる指針を与え、質問に答え、フィードバックしてくれる存在。それがアジャイルな顧客だ。<br>アジャイルな顧客は要求の優先順位づけも行う。何をいつ作るのかを決めるのは顧客だ。<br>とはいえ、仮先順位は顧符の独断で決めるわけじゃない。開発チームとの共同作業だ。たとえば、技術的な理由から、ある機能を他の機能よりも先に実装したほうがうまくいく場合なんかは開発チームから提案すべきだ(潰さなきゃならないい技術リスクがあるってことだからね)。<br>まあ、そうはいっても大抵はビジネスの視点から優先順位は決まっていく。そして決めた優先順位に従って、計画を現実のものにすべく、顧客は開発チームと一丸になって仕事をこなしていくんだ。<br>それから顧客には、やらなきゃいけない楽しくない仕事がひとつある。期日が迫ってきたり、手持ちの資金が心細くなってきたときには、何を作らないかを決めるのは顧客の仕事だ。改めて言うまでもないかもしれないが、これらすべてを円滑に進めたいと思うなら、なるべく顧客は開発チームの近くにいたほうがいい。さらに君のプロジェクト専任であれば理想的だ。当初、エクストリーム・プログラミングではこのプラクティスをオンサイト顧客と呼んでいた。スクラムではプロダクトオーナーという専任の役割を用意している。顧客が専任であるかどうかよりも重要なのは、エクストリーム・プログラミングやスクラムといったアジャイル手法でそうしたプラクティスが生まれるにいたった「思い」を理解することだ。すなわち「顧客をじかに開発へ巻き込めば巻き込むほど、プロダクトはよくなっていく」。ここからアジャイル手法は生まれたんだ。だから、お客さんにはできるだけプロジェクトに積極的にかかわってもらおう。<br>顧客という役割がどれだけ重要なのかをきちんと納得してもらって、プロジェクトの成功のために必要な決断を下せるだけの権限を委譲しておいてもらおう。お客さんに自ら進んで決断してもらうようにするんだ。",
      "questions": [
        "プロダクトオーナー",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_2",
      "message": "アジャイルな開発チームは職能横断的なメンバーで構成されており、顧客の望むフィーチャーをリリース可能なソフトウェアにするために集められる。アナリスト。プログラマ。テスター。データベース管理者。他にもユーザーストーリーをちゃんと動くソフトウェアとして実現するために必要なメンバーを全てそろえる。他にもデータベース管理者、システム管理者、テクニカルライター、トレーナー、業務改善担当、インフラ管理者、ネットワーク管理者、などなど。こうした役割もすべて開発チームに含まれるし、他のチームメンバーと同じように扱われる。",
      "questions": [
        "開発チーム",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_3",
      "message": "スクラムマスターは言ってみればアジャイルコーチとかっこいいプロジェクトマネージャを合わせたような感じだ。新しいチームを軌道に乗せるときには、アジャイルコーチがいると非常に助かる。アジャイルコーチは、アジャイル開発の原則や考え方をチームに説明し、受け入れていくことを後押しする。最後までやり遂げられるチームにするのがアジャイルコーチの仕事だ。そのために、チームが惑い習慣へ逆戻りしないよう注意を払う。コーチングについてはAgile Coachingという良書があるので参考にしてほしい。",
      "questions": [
        "スクラムマスター",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_4",
      "message": "アジャイル開発では、プロジェク卜でこなすべきToDoリストを<br>「マスターストーリーリスト(プロダクトバックログ)」と呼ぶ。リストの項目には、顧客がソフトウェアで<br>実別したいと思っているありとあらゆるフィーチャーを載せておく。<br>マスターストーリーリストは、フィーチャー(ユーザーストーリーとして表現する）の一覧だ。リストには顧客がソフトウェアで実現したいものを載せていく。載せた項目は、顧客が優先順位をつけて、開発チームが見積もる。その結果が計画の土台となる。良いマスターストーリーリストの長さは、１か月から６か月程度の期間でこなせる仕事の範囲に収まっている。あまりたくさんのストーリーをリストに載せても仕方がない。なぜなら、6ヶ月後に状況がどうなっているかなんでわからないからだ。状況が変わっていたら、半年も前に追加したストリーなんて、もうたぶん要らなくなってるんじゃないだろうか。<br>だったら、今から半年先のことに気を揉んだって仕方ないと思わないかい？そうはいっても、マスターストーリーリストに載っているストーリーをすべて実装し尽くしてしまったらどうするんだと思うかもしれない。確かにそういうケースもなくはないが、滅多やたらとお目にかかれるものじゃない。いつだって<br>与えられた期間や資金よりもやるべきことは多いものだ。",
      "questions": [
        "プロダクトバックログ",
        "マスターストーリーリスト",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_5",
      "message": "ストーリ一計画ミーティングは、ジャストインタイム分析の結果を確認するミーティングだ。ストーリー計画ミーティングでは、これから始まるイテレーションで取り組むストーリーの<br>準備が整っていることを全員で確かめる。顧客と一緒に受入テスト条件をレビューしたり、開発チームが見積りの数値を確認したりする。ストーリーの実装を始めるにあたって、必要な調査に漏れがないことを確認するのもこのタイミングだ。場合によっては、想定していたよりもストーリーが大きいことに気づくこともあるだろうが、それはそれで構わない。1回のイテレーションに収まるようにストーリーを分割して計画を更新し、前へ進んでいけばいい。逆の場合も作戦は同じだ(思っていたよりも小さいスーリーがあったら、イテレーションに収まるだけ他の小さなストーリーを「おかわり」して計画を更新し、前に進んでいけばいい）。",
      "questions": [
        "スプリント計画",
        "ストーリ一計画ミーティング",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_6",
      "message": "デイリースタンドアップは、重要な情報をチーム内ですばやく共有することを目的にした集まりだ。あらゆるミーティングを無くすための究極のミーティングがデイリースタンドアップだ。デイリースタンドアップはここまでに本章で紹介してきたミーテイングと違い、会議体として正式に「開催」しない。<br>チームメンバーが毎日、自主的に集まって話し合う。１回のミーティングにかける時間は5分から長くても10分程度にして、立ったままでやる(簡潔に伝えることを常に意識するためだ)。<br>この場で報告する内容は、基本的には自分の作業の最新状況だ。チームメンバーに知っておいてもらいたいことがあれば、それもこの場で共有する。さて、大抵のアジャイル手法の解説書に載っているデイリースタンドアップのやり方はこうだ。全員で輸になって立ち、チームメンバーひとりひとりが、他のチームメンバー全員に対して次の3つを伝える。<br>・昨日やったこと<br>・今日やること<br>・チームの開発速度を下げてしまうことがあれば何でも<br>なかなかいいんじゃないか。でもこれだと、新たなひらめきとかチームの振る舞いを変えるにはちょっと物足りない。たとえば、デイリースタンドアップでの報告の仕方をこんな感じにしてみたらどうだろう？<br>・昨日、世界をどう変えたのか<br>・今日は何をぶちかますつもりか<br>・不運にも自分の行く手を限んでしまったばかりに、あえなく吹き飛ばされるさだめとなった難問がどんな末路をたどるのか<br>デイリースタンドアップでの報告の仕方をこんな風にしてみたら、場の雰囲気も一変するんじゃないだろうか。せっかくみんなの前に立って話すんだから、淡々と最新状況を報告するだけじゃもったいない。<br>自分がこれからやろうと思っていることを天地神明に誓って宣言してみたらどうだろう？森羅万象を前に宣言したとなれば、取れる行動は２つに１つだ。自ら「やるぞ」と宣言したことをやり遂げるか、そうじゃないか。どっちに転ぶかはまったくもって君次第だ。つまり私からのアドバイスはこうだ。毎日、チームのみんなに「今日、私はこれをやります」とコミットメントを表明するんだ。これを続けていけば、自分でもびっくりするぐらい実際に仕事をやり遂げられるようになっていくはずだ。",
      "questions": [
        "デイリースクラム",
        "デイリースタンドアップ",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_7",
      "message": "ショーケース（スプリントレビュー）はチームが成し遂げた成果をお披露目して、<br>お客さんから本物のフィードパックを得る絶好の機会だ。<br>ショーケースでは今回のイテレーションで実装したストーリーをデモする。<br>そのときに見せるのは、テストサーパにデプロイした本物のコードだ。<br>上手に描けた図を見せるのでもなければ、うまくいくであろう目論見を伝えるのでもない。<br>ここで見せるのは、ちゃんと動くように開発チームが奮闘した結果であり、<br>必要とあらば今ここで本番環境にリリースできるコードだ。<br>なぜなら作業は「完了」しているからだ。",
      "questions": [
        "スプリントレビュー",
        "ショーケース",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_8",
      "message": "ミニふりかえりは、10分とか15分ぐらいの時間で開催する、短くて集中したミーティングだ。チーム全員が定期的に集まって、すごくうまくいったことやもっとうまくやるためにどうすればいいかを話し合うんだ。有意義なふりかえりをするために一番大切なルールは、みんなが安心できる雰囲気を作ることだ。もしそこに問題があるようなら「ふりかえり最重要条項」の出番だ。これができなきゃ始まらないってことを肝に銘じておこう。<br>どんな問題が出てきたとしても、私たちは次のことを納得し、それを心から信じます。チームメンバーそれぞれは、その当時わかっていたこと、備えていた自分自身のスキルと能力、手に入れることのできたリソース、そして現場の状況に応じて、自分の力が及ぶ限りの全力を尽くしたのです。<br>つまり、ふりかえりは魔女狩りじゃない。",
      "questions": [
        "プロジェクトふりかえり",
        "ミニふりかえり",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "アジャイルサムライ_9",
      "message": "イテレーション計画ミーティングでは、開発チームと顧客とが一緒になって、次回のイテレーションの作業を計画する。チームのベロシティを確認し、次にとりかかるストーリーを整理する。そして、次回のイテレーションでチーム全体としてコミットメントする作業量を見極める。イテレーション計画ミーティングは、プロジェクトの健康状態を確認するのにふさわしいタイミングでもある。<br>プロジェクトの現状を気性速報みたいに表現するのも悪くないだろう。何か必要なものがあるとか、特に話し合っておきたい厄介な問題があるんだったら、それも併せて伝えよう。<br>プロジェクトがいつ頃おわりそうなのかを把握したいなら、バーンダウンチャートを使うのがいい。バーンダウンチャートは残酷なまでに正直な、冷酷非情のツールだ。プロジェクト完了への現実的な見通しをありのままに淡々と開発チームと顧客に報告してくれる。",
      "questions": [
        "イテレーション計画",
        "プロダクトバックログリファインメント",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_1",
      "message": "エクストリームプログラミング（XP）は、1999年ケント・ベックらによって定式化されたソフトウェア開発手法であり、代表的なアジャイルソフトウェア開発手法の1つである。<br><br>当初の12のプラクティスは、<br>計画ゲーム、小規模リリース、比喩、シンプルデザイン、テスティング、リファクタリング、ペアプログラミング、共同所有権、継続的インテグレーション、週40時間、オンサイト顧客、コーディング標準、であった。その後ケントベック自身によって2つのプラクティス、オープン ワークスペースと日日のデータベース移行、が追加された。<br><br>またこれらはロン・ジェフリーズによって更に洗練が進められ、チーム全体、計画ゲーム、顧客テスト、小さなリリース、シンプルなデザイン、ペアプログラミング、テストファースト開発、設計の改善、コードの共同所有、コーディング標準、継続的インテグレーション、メタファー、持続可能なペース、と変化を遂げている。<br>更に、ロイ・ミラーによってプラクティスは4つに分類され、19のプラクティスとして世に広まった。現在XPとして頻出するものは、この再構成された19のプラクティスである。",
      "questions": [
        "エクストリームプログラミングとはなんですか",
        "XPとはなんですか",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_2",
      "message": "エクストリームプログラミング（XP）には価値がある。価値とは理念のことだ。これは抽象的だが、識別でき、知覚できるものだ。XPの価値には勇気、コミュニケーション、シンプル、フィードバック、敬意（尊敬）という5つの価値がある。",
      "questions": [
        "エクストリームプログラミングの価値とはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_3",
      "message": "XPにおける５つの価値の１つである「勇気」とは、困難なときでさえ正しい決断をすること。そして、ステークホルダーにはしかるべきタイミングで、真実を伝えること。",
      "questions": [
        "エクストリームプログラミングの価値の１つである勇気とはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_4",
      "message": "XPにおける５つの価値の１つである「コミュニケーション」とは、しかるべき人にしかるべき情報を伝えること。そして、情報を最大限に活用できるようにすること。",
      "questions": [
        "エクストリームプログラミングの価値の１つであるコミュニケーションとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_5",
      "message": "XPにおける５つの価値の１つである「シンプル」とは、たとえやりたいことでも実際には不必要なものであれば、捨ててしまうこと。",
      "questions": [
        "エクストリームプログラミングの価値の１つであるシンプルとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_6",
      "message": "XPにおける５つの価値の１つである「フィードバック」とは、ありとあらゆる機会にしかるべき教訓を学ぶこと。",
      "questions": [
        "エクストリームプログラミングの価値の１つであるフィードバックとはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_7",
      "message": "XPにおける５つの価値の１つである「敬意」とは、思いやりを持って仲間や他人に接すること。お互いの専門性と成功への願望を認めること。",
      "questions": [
        "エクストリームプログラミングの価値の１つである敬意とはなんですか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_8",
      "message": "XPには19のプラクティスが定義されている。<br>プラクティスは共同、開発、、管理者、顧客の4つに分類されている。<br>共同のプラクティスは反復、共通の用語、オープンな作業空間、頻繁な振り返りの4つ。<br>開発のプラクティスはテスト駆動開発（TDD）、ペアプログラミング、リファクタリング、ソースコードの共同所有、継続的インテグレーション（CI）、YAGNIの（ヤグニ）6つ。<br>管理者のプラクティスは責任の受入、援護、四半期毎の見直し、ミラー、最適なペースの仕事の5つ。<br>顧客のプラクティスはストーリーの作成、リリース計画、受け入れテスト、短期リリースの4つ。",
      "questions": [
        "エクストリームプログラミングのプラクティスにはどういったものがありますか",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_9",
      "message": "XPの共同のプラクティスである反復（イテレーション）とは、XPチームが実践している設計、コーディング・検証・リリースという全サイクルのことだ。<br>通常、これには2～3週間のタイムボックスを設定する。<br>新しいチームでは反復（イテレーション）を1週間にすることをおすすめする。<br>各反復（イテレーション）は、顧客がストーリーを選ぶことから始まる。チームは選ばれたストーリーをその反復（イテレーション）で実装する。<br>顧客が導入して利用できるソフトウェアをチームが作り出せたら、その反復（イテレーション）は終了する。各反復（イテレーション）の始まりは、顧客がプロジェクトの方針を変更することができるポイントになる。反復（イテレーション）期間を小さくすればするほど、頻繁に方針を変更することができる。<br>反復（イテレーション）期間を固定にすると、開発によいリズムが生まれる。<br>小さく頻繁な反復（イテレーション）は、計画づくりを何度もするため、オーバーヘッドがあるように見えるが、計画づくりにかかる時間は反復（イテレーション）期間の長さに比例する傾向がある。<br>",
      "questions": [
        "XPの共同のプラクティスである反復（イテレーション）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_10",
      "message": "XPの共同のプラクティスであるユビキタス言語（共通の用語）とはなにか。<br>現在のシステムのビジネスロジックをプログラマではないドメイン専門家に説明してみよう。<br>ドメイン専門家が理解できる言葉で、システムがどうやって動いているのかを説明できるか？<br>プログラマ向けの専門用語、デザインパターンやコーディングスタイルの名前などを使わないで説明することができるか？<br>ドメイン専門家がビジネスロジックにおける潜在的な問題を特定することができるか？<br>もしできなければ、あなたにはユビキタス言語が必要だ。",
      "questions": [
        "XPの共同のプラクティスであるユビキタス言語（共通の用語）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_11",
      "message": "XPの共同のプラクティスであるオープンな作業空間とは、どういったものか。<br>スピーカーフォンでチームミーティングをしたことがあるなら、面と向かっての会話とどれだけ違うか分かるだろう。なまの話し合いと比べて、電話会議は遅くつっかえながら進む。会話そのものや、お互いに話し合っている人たちのあいだには、不快な隔たりがある。<br>これがどれだけ仕事に影響を及ぼしているか、自覚していないかもしれない。<br>人々の距離が遠くなると、コミュニケーションの有効性も低下する。誤解が生まれ、遅延が紛れ込む。答えを待つ煩わしさを避けるために、推測し始める。すると間違いが起こる。<br>多くの開発手法は、この問題に対応するために直接的なコミュニケーションの必要性を減らそうとする。これは一見理にかなった対応だ。質問が遅延やエラーを引き起こすのなら、質問の必要性を減らしてしまおう！という訳だ。<br>XPではチームがオープンな仕事場に全員同席している。ここにはビジネスや設計、プログラミング、テステイングの専門家も含まれている。質問があれば振り向いて尋ねるだけでいい。すぐに返事がもらえる。もしまだはっきりしないところがあれば、ホワイトボードで議論することもできる。",
      "questions": [
        "XPの共同のプラクティスであるオープンな作業空間とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_12",
      "message": "XPの共同のプラクティスに頻繁な振り返りというものがある。最もよくある振り返りは、イテレーションの振り返りで、イテレーションが終わるたびに実施する。<br>イテレーションの振り返りに加えて、重要なマイルストーンでもっと長く、集中的な振り返りを実施してもよい。こうしたリリースの振り返り、プロジェクトの振り返り、予期せぬ出来事によって状況が変化したときに実施される振り返りは、あなたの体験をもっと深く考える機会になり、それを組織の他の人と共有するための密度の濃い重要な教訓を与えてくれる。",
      "questions": [
        "XPの共同のプラクティスである頻繁な振り返りとは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_13",
      "message": "XPの開発のプラクティスであるテスト駆動開発（TDD）とは、テスティング、コーディング、リファクタリングのすばやいサイクルだ。機能を追加するときには、ペアは何十回もこのサイクルを繰り返す。追加するものがなくなり、取り除くものもなくなるまで、ごく小さなステップでソフトウェアを実装して改良していく。<br>TDDは欠陥の発生率を大幅に削減するという研究結果もある。TDDを適切に使うと、設計を改善して、<br>公開しているインターフェイスをドキュメント化し、将来の間違いを防ぐことにも役立つ。<br>TDDはもちろん完壁じゃない。TDDはレガシーなコードベースで使うのは難しい。<br>たとえゼロから開発するシステムであっても、学習曲線を克服して安定して使えるようになるまでには数か月かかる。<br>とにかく試してみよう。TDDは他のXPプラクティスからも恩恵を受けるのだが、これらは必須というわけではない。ほぼどんなプロジェクトにでも、TDDを使うことができる。",
      "questions": [
        "XPの開発のプラクティスであるテスト駆動開発（TDD）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_14",
      "message": "XPの開発のプラクティスであるペアプログラミングとは、２人ペアでプログラミングをすること。<br>ペアになると1人がコードを書く。この人がドライバーだ。もう1人はナビケータで、考えるのが仕事だ。<br>ナビケータはドライバーがタイプしているものについて考えるときもある。<br>次に取り組むべきタスクについて考えるときもあれば、<br>どうやってそのタスクを全体の設計にぴったり合わせ込むかについて考えるときもある。<br>ナビケータが先回りして考えてくれているおかげで、ドライバーは全体像を気にせずに、<br>厳密で構文的に正しいコードを書くという戦術的課題に自由に取り組むことができる。<br>ナビゲータはコーディングの詳細に気を取られることなく、戦略的課題を検討することができる。<br>ドライバーとナビゲータは一緒に仕事をすることで、1人でやるよりも質の良い仕事をすばやく仕上げることができる。<br>ペア作業は、よいプログラミング習慣を強化することもできる。XPは継続的なテスティングと<br>設計の改善をよりどころにしており、かなりの自己鍛錬が必要だ。ベア作業をすると、<br>こうした難しいが重要なタスクをやるのに、仲間からの前向きなプレッシャーをもらえる。<br>コーディングに関する知識やヒントをチーム全体に広めることができる。<br>ペアプログラミングをしていると、コードに完全に集中して、生産性が高いフローの中で1時間を過ごすことができる。<br>これは普段とは違った種類のフローだ。パートナーと一緒に仕事をしているおかげだ。<br>それでいて、割り込みに対してかなり抵抗力がある。まず第一に、誰かと一緒に仕事をしていると、<br>職場の友人がほとんど割り込んでこないことに気づくだろう。誰かが割り込んできても<br>1人がその割り込みを処理し、もう1人が思考の流れを保ち続ける。さらに周囲の雑音は気にならなくなり、<br>プログラミングパートナーとの会話にずっと集中できていることに気づくだろう。<br>もし仕事が物足りないと感じているなら、ペア作業は本当にすごく楽しい。<br>知力が倍増することにより、障害をもっと簡単に克服することができるだろう。たいていの場合、<br>頭が切れて共通の目的をもった人と協力することになる。しかも、タイプで腕が痛くなったら、<br>キーボードをパートナーに渡すことで、チームは生産的であり続けることができる。",
      "questions": [
        "XPの開発のプラクティスであるペアプログラミングとは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_15",
      "message": "XPの開発のプラクティスであるリファクタリングとは、毎日、自分たちのコードを前の日よりも少しよくすること。<br>エントロピー(無秩序さの度合い)は常に勝つ。あなたが思い描いたような美しくうまく設計されたコードも、<br>最終的には、スパゲッティのようにぐちゃぐちゃなものになる。<br>少なくとも、以前はそうだった。リファクタリングする前はね。<br>リファクタリングはコードの振る舞いを変更せずに設計を変更するプロセスだ。<br>何をするかは同じまま、どうするかを変更する。リファクタリングは元に戻すこともできる。<br>ある形が別の形よりもよいことがある。変更して、また元に戻せる。<br>同じように、コードの設計も変更することができる。これができると、エントロピーを寄せつけなくなる。",
      "questions": [
        "XPの開発のプラクティスであるリファクタリングとは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_16",
      "message": "XPの開発のプラクティスであるソースコードの共同所有とは、チーム全員が高品質なコードに責任を持つというものである。<br>数人の頭の中にだけ知識が集中するのはリスクになるが、これを測る指標がある。<br>これはトラックナンバーと呼ばれている。どれくらいの人がトラックにはねられたら、<br>プロジェクトが取り返しのつかない被害を被るのか？というものだ。<br>ゾッとする考えだが、これは現実のリスクに注意を向けている。主要メンバーが旅行に行ったり、<br>病気の子供の世話をするために家にいたり、新しい仕事についたり、急に退職したりすると、何が起こるのか？<br>代わりの人をトレーニングするのにどれくらい時間がかかるのか？<br>コードの共同所有は、コードを維持管理する責任をプログラマ全員に広げるものだ。<br>コードの共同所有とは、その名の通りのものだ。全員がコード品質に対して責任を共有している。<br>誰一人としてシステムのどの部分にも所有権を主張したりせず、誰もがどの部分にも必要な変更をすることができる。",
      "questions": [
        "XPの開発のプラクティスであるソースコードの共同所有とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_17",
      "message": "XPの開発のプラクティスである継続的インテグレーション（CI）とは、コードをいつでも出荷できるようにしておくというものである。つまり究極の目標は、いつでもリリースできるようにすること。<br>ソフトウェア開発の取り組みには、チームが「完了した」と言う時点と、<br>ソフトウェアが実際に出荷できるようになったという時点のあいだに隠れた隙聞があることが多い。<br>この隙間は何か月にもなることがある。やる作業自体はそれほど大したことはない。<br>全てのコードを1つにマージして、インストーラを作り、データベースを移行して、マニュアルを作るだけだ。<br>そうこうしているあいだに、これらの作業にどれくらい時間をかけたのか忘れてしまい、<br>チームはイライラしてくる。彼らは焦って、役に立つビルドの自動化をほったらかしにしてしまい、<br>さらにバグや遅れを招いてしまう。<br>継続的インテグレーションはよりよいアプローチだ。継続的インテグレーションを使うと、<br>全員のコードをインテグレーションして、その他のアプリケーションとともにリリースするための<br>インフラを構築しておくことができる。継続的インテグレーションの究極の目標は、<br>最近の数時間を除くすべての仕事をいつでもリリースできるようにすることだ。<br>実際には、イテレーションの途中でソフトウェアをリリースすることはないだろう。<br>ストーリーはまだ半分しか完了しておらず、機能も不完全だ。<br>ポイントは、たとえ機能的にはリリース可能でなくても、技術的にはリリース可能にしておくということだ。",
      "questions": [
        "XPの開発のプラクティスである継続的インテグレーション（CI）とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_18",
      "message": "XPの開発のプラクティスであるYAGNIとは、ユー・アーント・ガナ・ニーディットの頭文字をとったもの。どうせ要らないって、という意味。<br>この完結なXPのことわざは、シンプルな設計の重要側面をまとめたものだ。<br>推測に基づいてコーディングするのを避けよう。設計に何かを追記しようとしているときにはいつも、<br>それは今まさに実現しようとしているストーリーや機能をサポートするものか考えてみよう。<br>もしそうでなければ、それは要らない。設計は変化するだろう。顧客の気も変わるだろう。<br>同様に、もはや使われていないコードは削除しよう。<br>設計をもっと小さく、もっとシンプルに、もっと理解しやすくしよう。<br>もし将来もう一度それが必要になったら、いつでもバージョン管理システムから取り出すことができる。<br>今のところは、必要のないメンテナンスのお荷物だけどね。<br>私たちがこうしているのは、やり過ぎたコードは変更を難しくするためだ。<br>変更が簡単になるように推測して手が加えられた設計は、結局、いつか間違っていることが分かることが多い。<br>実際には、変更がもっと難しくなってしまう。通常は、間違った設計を修正するよりも、新たに追加する方が簡単だ。<br>正しくない設計はそれに依存したコードがあり、間違った判断をそこに固定化してしまうこともある。",
      "questions": [
        "XPの開発のプラクティスであるYAGNIとは",
        "どうせ要らないって",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_19",
      "message": "XPの管理者のプラクティスである責任の受入とは、責任は与えられるものではなく、しかるべきメンバーが判断を求められたとき、そのメンバー自らが責任を受け入れるというもの。<br>チームの仕事の管理はチームに任せよう。彼らはみな専門家だ。それこそが、彼らがチームにいる理由なんだ。信頼しよう。そして、プロジェクトを成功させるために必要な権限を与えることで、その信頼を裏付けよう。もしチームを信頼できないのなら、ふさわしい人がその場にいないということだ。完壁な人などいないが、全体としてまとまったときに信頼できるチームが必要だ。<br>日常の意思決定における権限はアジャイルプロセスそのものにまで及ぶ。誰かにプロセスの変更を押しつけられるのではなく、アジャイルの原則を使って自分自身のプロセスを変更しよう。<br>管理者はメンバーに対して責任を与えるのではなく、受け入れてもらうようにする必要がある。",
      "questions": [
        "XPの管理者のプラクティスである責任の受入とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_20",
      "message": "XPの管理者のプラクティスである援護とは、管理者は開発チームの援護をするというもの。<br>プロジェクトマネージャは、チームが組織内の他のメンバーと一緒に仕事をする手助けをする。<br>彼らは通常、プログラミングとは無関係のプラクティスをコーチするのが得意だ。<br>ラインマネージャの中にはこうした役割に合っている人もいる。一方で、たいていのプロジェクトマネージャは技術的な専門知識に欠けており、XPのプログラミングに関係するプラクティスをコーチすることができない。そのため、プログラマコーチの力添えが必要になる。顧客がプロジェクトマネージャを兼ねていることもある。",
      "questions": [
        "XPの管理者のプラクティスである援護とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_21",
      "message": "XPの管理者のプラクティスである四半期毎の見直しとは、顧客が特定の四半期内に求められる機能の観点から、チーム全体の計画を立てるものです。これにより、チームが木の中にいる間、森林の景観を見ることができ、顧客が他のステークホルダーから求められている機能がいつ利用可能になるかについての考えることが必要だというものです。<br>特定のストーリーに関する情報が比較的高いレベルにある場合、四半期サイクル内のストーリーをデリバリーする順序が変更され、またストーリーの内容も変更される可能性があることを覚えておいてください。毎週のサイクルのたびに再計画できる場合は、その変更が明らかになるとすぐに誰もが驚きを最小限に保つようにすることができます。",
      "questions": [
        "XPの管理者のプラクティスである四半期毎の見直しとは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_22",
      "message": "XPの管理者のプラクティスであるミラーとは、今の状態をチームに知らせること。つまりチームの状況や状態の可視化（見える化）のことである。<br>健全なプロジェクトには活気がある。緊張ではなく活気だ。興奮が漂っている。人々は会話を通じて一緒に仕事をして、ときどき冗談を言っている。<br>とても忙しかったり急いでいるわけではないが、明らかに生産的だ。<br>ペアが助けを必要としていると他のペアがそれに気づき、力を貸したらまた仕事に戻る。ペアが何かをうまくやり遂げると、全員が少しのあいだ称賛してくれる。<br>不健全なプロジェクトは静かで、緊張している。チームメンバーは何かあってもそんなに話さない。<br>活気がなく、寒々とした感じがする。<br>人々は時計を頼りにして生きている。出勤して、退社する。さらに悪いことに、<br>誰が思い切って最初に帰るのか観察しているんだ。<br>部屋の雰囲気に加えて、もう1つの手掛かりは、役に立つ情報をすばやく無意識のうちに知らせてくれるものだ。<br>イテレーションも半ばに差しかかったときにイテレーション計画のカードの約半分が完了しているかどうかで、<br>チームは予想よりも速く進んでいるのか、それとも遅れているのかが分かる。<br>情報満載の仕事場はまた、人々がコミュニケーションする方法を提供する。<br>壁一面にたくさんのホワイトボードがあり、インデックスカードが山積みになっている。<br>ホワイトボードに協力して書かれた設計スケッチは、<br>30分のパワーポイントのプレゼンテーションよりもずっとすばやく効果的にアイデアを伝えられることが多い。<br>情報満載の仕事場に欠くことができない光景は、可視化のための大きなチャートだ。<br>このチャートの目的は、情報をとてもシンプルにはっきりと見せることだ。<br>これによって、部屋のどこからでも情報を伝えることができる。",
      "questions": [
        "XPの管理者のプラクティスであるミラーとは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_23",
      "message": "XPの管理者のプラクティスである最適なペースの仕事とは、ずっとベストを尽くして最も生産的で活き活きとした仕事ができるようなペースのこと。一般的には週40時間が目安とされる。<br>チームはプログラミングを楽しんでいる。問題を解決すること、優れたコードを書くこと、<br>テストがパスしていくのをじっと見ていること、そして何より、リファクタリングでコードを削除するのが楽しい。<br>空き時間にもプログラミングをして、シャワー中でさえ仕事のことを考えている。<br>つまり、仕事を愛している。<br>それなのに目標が不明確で、ほとんど連帯感もなく、内輪もめしているチームに私を連れてくるなんて。<br>仕事に行くのが怖くて日が覚める。<br>私は朝から晩まで職場にいるが、朝メールを読んで、夕方コードをいじるほかは、<br>1日中わずかに関連する技術的なウェブサイトをまったり読んで過ごしたくなる。<br>私たちはみんな、こんな経験をしたことがある。私たちはプロフェッショナルなので、やる気をなくしているときでさえ、質の高い仕事をしようと努力する。でも、あなたのキャリアの中で最も生産的だった時期を思い出してみよう。<br>日が覚めて仕事に行けるのに感謝していたのとは大きな違いがあるのに気づかないかい？<br>1日の終わりに、意義のある仕事をやり遂げたという手応えを感じて、定時に退社するのにとても満足していなかったかい？<br>このプラクティスは、プロフェッショナルたるものは難しい環境でも優れた仕事ができるが、<br>活気づいてやる気が出ていればベストを尽くした最も生産的な仕事ができる、ということを認めたものだ。活き活きとした仕事にするたの1つの手段が、最適なペースの仕事だ。",
      "questions": [
        "XPの管理者のプラクティスである最適なペースの仕事とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_24",
      "message": "XPの顧客のプラクティスであるストーリーの作成とは、プロジェクトにおける自己完結した個別の構成要素を表している。<br>ストーリーは個別の機能に対応していることが多く、通常1日か2日分の仕事になる。<br>ストーリーは顧客視点であり、ビジネスの成果という観点で結果を記述したものだ。<br>これらは実装の詳細ではないし、完全な要件仕様でもない。一般的にはただのインデックスカードであり、<br>スケジューリングのための情報として使われる。<br>ストーリーは、XPの中で最も誤解解のあるものかもしれない。これは要件ではない。<br>これはユースケースでもない。これは物品でさえない。これは物語よりもっとシンプルなものだ。<br>ストーリは計画のためにある。これはチームが作り出す成果を1行か2 行でシンプルに説明したものだ。<br>アリスター・コーバーンはストーリーを「将来の会話のための約束手形」と呼んでいる。<br>ステークホルダーがチームに作り出して欲しいものはすべてストーリーになるはずだ。例えば次のようなものだ。<br>・倉庫在庫報告<br>・就職説明会のための全画面デモオプション<br>・来るべきサーカス団の投資家のためのTPSレポート<br>・ユーザログイン画面を企業ブランドにカスタマイズできること",
      "questions": [
        "XPの顧客のプラクティスであるストーリーの作成とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_25",
      "message": "XPの顧客のプラクティスであるリリース計画とはなにか。<br>「投資に対する収益を最大化するんだと上司は言う。<br>「このプロジェクトのビジョンは既に話したとおりだ。詳細については君に任せた。自分で計画を作って、リリース日を設定してくれ。<br>ただし、投資に対して向収益が得られるようにしてくれ」<br>さあ、どうする？<br>まず最初に、一度に1つのプロジェクトにだけ取り組もう。一度に複数のプロジェクトに取り組んでいるチームも多いが、これは間違っている。<br>仕事の切り替えは非常に大きなコストになる。<br>一度に1つのプロジェクトに取り組むようにすると、プロジェクトが完了する毎に1つずつプロジェクトをリリースすることができる。<br>これは仕事の全体の価値を高めることになる。<br>早期にリリースすることは、1つのプロジェクトに取り組んでいるときでさえも、よい考え方だ。<br>もし最も価値のある機能をまとめて最初にリリースすれば、驚くほど価値を向上させることができる。<br>重要な考え方として、市場に価値を提供する最低限の機能セット（MMF）というものがある。<br>リリース計画を作るときには、ステークホルダーの価値という観点から考えよう。ストーリーに注目し、<br>ストーリーがどうやって1つのMMFを作り上げるのかについて考えるのが役立つときもある。<br>MMFに注目し、それを後でどうやってストーリーに分割できるかについて考えるのがよいときもある。<br>最小顧客価値の最小という部分を忘れないようにしよう。各機能をできるだけ小さくするんだ。<br>最小限の機能ができたら、それらを実現可能なリリースにグループ化しよう。<br>これはブレインストーミングの練習にもなる。最終的な計画ではないので、いろいろなグルーピングを試してみよう。<br>各リリースに必要となる機能の数がどうやったら最小限になるか考えよう。<br>最も難しいところは、どうやって小さなリリースをするか見つけ出すことだ。<br>機能を売りにするのも1つだし、リリース全体を売りにするというのも1つだ。<br>これは新しいプロダクトを立ち上げているときには、特に難しい問題になる。<br>うまくやるには、ライバルに対抗するのに必要な機能ではなく、プロダクトを引き立たせる機能に集中しよう。",
      "questions": [
        "XPの顧客のプラクティスであるリリース計画とは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_25",
      "message": "XPの顧客のプラクティスである顧客テストの目的は顧客とプログラマとのコミュニケーションである。顧客にはプログラマが持っていない特殊な専門知識やドメイン知織がある。<br>こうした専門知識はプログラマがドメインルールと呼ぶもので、これを必要とするアプリケーション分野もある。<br>アプリケーションにおいて適切にドメインルールをコード化するには、プログラマが十分にそれを理解していることを確かめておく必要がある。<br>顧客テストは、顧客がこうした専門知識をプログラマに伝えるのに役立つ。<br>これは思ったほど複雑ではない。顧客テストというのは、実際にはただのサンプルだ。<br>プログラマはこれを自働テストに加えて、ドメインルールが正しく実装できたかどうかをチェックするのに使う。<br>テストにパスしたら、プログラマはこのテストを10分ビルドに組み込む。<br>これにより、今後テストが通らなくなるようなことがあってもプログラマはそれを知ることができる。顧客テストを作るためには、説明、サンプル、開発というプロセルに従おう。",
      "questions": [
        "XPの顧客のプラクティスである受け入れテストとは",
        "XPの顧客のプラクティスである顧客テストとは",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    },
    {
      "_id": "エクストリームプログラミング_25",
      "message": "XPの顧客のプラクティスである短期リリースに従い、動作する価値のあるソフトウェアを頻繁に届けることは、ソフトウェアの価値をさらに高める。<br>頻繁にソフトウェアをリリースすることによるメリットを真の顧客が理解し、最も価値のあるストーリーから優先的に対処していけば、<br>どのリリースでもその時点で考え得る最も価値のあるソフトウェアを届けることができる。<br>動作するソフトウェアをできるだけ早く届けることは、2つの重要なフィードバックループを作り出すことができる。<br>1つは、実際の顧客から開発者へ、そのソフトウェアがどれだけきっちり顧客のニーズが満たせているのかを伝えるものだ。<br>もう1つは、チームから顧客へ、チームがどれだけ信頼でき、能力があるのかを実証することにより伝えるものだ。<br>頻繁に届けることは、こうしたループをより強固なものにしてくれる。<br>顧客はプロセスに参加することによって実際の成果に対して影響力があること実感する。<br>開発者は、ふさわしい人が真の問題を解決することを手伝ってくれているのを実感する。<br>どんなソフトウェアプロジェクトであれ、最優先事項は頻繁に継続的に価値を届けることであり、<br>それによって顧客をもっと満足させることだ。成功は後からついてくる。",
      "questions": [
        "XPの顧客のプラクティスである短期リリースとは",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    }
  ]
}